<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ConditionType>OnTrue</ConditionType>
  <Conditions />
  <Commands />
  <ScriptCondition>Program.UseWidget("homegenie/generic/timetable");
Program.AddFeature("", "Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.Weekend", "Timetable to use for weekend", "timetable");
Program.AddFeature("", "Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.Workday", "Timetable to use for workday", "timetable");
Program.AddFeature("", "Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.Holiday", "Timetable to use for holiday", "timetable");
Program.AddFeature("", "Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.Special", "Timetable to use for special day", "timetable");
Program.AddFeature("", "Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.Enable", "Enable Timetable scheduling", "checkbox");
Program.AddFeature("", "Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.Repeat", "Repeat command for the whole duration", "checkbox");
Program.AddFeature("", "Light,Switch,Shutter,Dimmer,Thermostat", "TimeTable.CheckDST", "Enable Day Light Saving check", "checkbox");
// Initialize Calendar if not already defined
var calendarSettings = Program.Store("Calendar").Get("Days");
while (calendarSettings.Value.Length &lt; 366) calendarSettings.Value += '0';
if (calendarSettings.Value[0] == '0')
  calendarSettings.Value = "2" + calendarSettings.Value.Substring(1); // first of the year marked as holiday (2)
Program.Run();
</ScriptCondition>
  <ScriptSource>// HomeGenie Timetable Widget
// based on "Table Horaire"" widget idea by Daniel Maillard
var MODULE_DOMAIN = "HomeAutomation.HomeGenie";
var MODULE_ADDRESS = "Timetable";

var programsCount = 10;
var timeResolution = 5d;
var tableLength = (int)((24 * 60) / timeResolution);
var tablePrefix = "Settings.";
var timetableModules = Modules.WithFeature("TimeTable.Enable");

var GetTableType = new Func&lt;ModuleHelper, string&gt;((module)=&gt;{
    // determine table type
    var tableType = "OnOff";
    if (module.IsOfDeviceType("Shutter,Dimmer"))
    {
      tableType = "Level";
    }
    else if (module.IsOfDeviceType("Thermostat"))
    {
      tableType = "Therm";
    }
  	return tableType;
});

var GetTableSettings = new Func&lt;string, ModuleParameter&gt;((table)=&gt;{
  var settingPath = tablePrefix + table;
  var setting = Program.Store("Tables").Get(settingPath);
  // corrupted data check 
  if (!setting.Value.All(char.IsLetterOrDigit))
    setting.Value = "";
  while (setting.Value.Length &lt; tableLength) setting.Value += "0";
  setting.Value = setting.Value.Substring(0, tableLength);
  return setting;
});

// GetTableOptions Settings.Options.0
var GetTableOptions = new Func&lt;string, dynamic&gt;((tableIndex)=&gt;{
  dynamic options = new ExpandoObject();
  // default options
  options.Disable = false;
  options.DisableTimeRange = "";
  options.AutoOff = new ExpandoObject();
  options.AutoOff.WhenArmedAway = false;
  options.AutoOff.WhenArmedHome = false;
  options.AutoOff.WhenInTimeRange = false;
  options.AutoOff.TimeRange = "";
  options.AutoOff.WhenNoMotion = false;
  options.AutoOff.MotionTimeout = 60;
  options.AutoOff.MotionSensor = "";
  // try reading actual values
  var topts = Program.Store("Tables").Get(tablePrefix+"Options."+tableIndex);
  try { options = JObject.Parse(topts.Value); } catch { }
  return options;
});
var SetTableOptions = new Action&lt;string, string&gt;((tableIndex, jsonOptions)=&gt;{
  var topts = Program.Store("Tables").Get(tablePrefix+"Options."+tableIndex);
  topts.Value = jsonOptions;
});

var GetTableIndex = new Func&lt;ModuleHelper, DateTime, int&gt;((module, date) =&gt; {
  // calculate current day of year as interval from 0 to 365 (non-leap year normalized)
  var dayIndex = date.DayOfYear - 1;
  // normalize if not leap year
  if (!DateTime.IsLeapYear(date.Year) &amp;&amp; date.Month &gt; 2) dayIndex++;
  var isWeekend = (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday);
  // Get day type from Calendar (Weekday, Weekend, Holiday, Special)
  // and select Timetable table to be used
  var tableIndex = 0d; // 0 stand for not used, accepted values are 1 to 10
  bool isHoliday = false, isWorkday = false, isSpecial = false;
  var calendar = Program.Store("Calendar").Get("Days");
  var dayType = calendar.Value[dayIndex];
  switch (dayType)
  {
    case '0':
    if (!isWeekend) isWorkday = true;
    break;
    case '1':
    isWorkday = true;
    break;
    case '2':
    isHoliday = true;
    break;
    case '3':
    isSpecial = true;
    break;
  }
  if (isWorkday) 
  {
    tableIndex = module.Parameter("TimeTable.Workday").DecimalValue;
  }
  else if (isHoliday) 
  {
    tableIndex = module.Parameter("TimeTable.Holiday").DecimalValue;
  }
  else if (isSpecial) 
  {
    tableIndex = module.Parameter("TimeTable.Special").DecimalValue;
  }
  else if (isWeekend) 
  {
    tableIndex = module.Parameter("TimeTable.Weekend").DecimalValue;
  }
  return (int)tableIndex;
});

var GetDomainAddress = new Func&lt;string, dynamic&gt;((domainAddress)=&gt;{
  dynamic v = new ExpandoObject();
  v.Domain = "0";
  v.Address = "0";
  if (domainAddress.IndexOf(":") &gt; 0)
  {
    v.Domain = domainAddress.Substring(0, domainAddress.LastIndexOf(':'));
    v.Address = domainAddress.Substring(domainAddress.LastIndexOf(':') + 1);
  }
  return v;
});

var GetClosestEvent = new Func&lt;ModuleParameter, DateTime, DateTime&gt;((parameter, date)=&gt;{
  var closestTimestamp = DateTime.Now;
  var hist = parameter.Statistics.History;
  if (hist.Count &gt; 0)
  {
    try
    {
      var closest = hist[hist.Count-1];
      for(int p = hist.Count-1; p &gt;= 0; p--)
      {
        if (date &lt;= hist[p].Timestamp.ToLocalTime())
        {
          break;
        }
        closest = hist[p];
      }
      closestTimestamp = closest.Timestamp.ToLocalTime();
    } catch { }
  }
  return closestTimestamp;
});

var IsTableDisabled = new Func&lt;dynamic, DateTime, bool&gt;((tableOptions, date)=&gt;{
  var disabled = false;
  if (tableOptions.Disable == true &amp;&amp; tableOptions.DisableTimeRange == "")
    disabled = true;
  else if (tableOptions.Disable == true &amp;&amp; tableOptions.DisableTimeRange != "" &amp;&amp; Scheduler.IsOccurence(date, tableOptions.DisableTimeRange.ToString()))
    disabled = true;
  return disabled;
});

var MatchAutoOffOptions = new Func&lt;dynamic, DateTime, bool&gt;((tableOptions, date)=&gt;{
  bool autoOff = false;
  if (tableOptions.AutoOff.WhenArmedAway == true || tableOptions.AutoOff.WhenArmedHome == true)
  {
    var securityAlarm = Program.WithAddress(90);
    if (securityAlarm != null &amp;&amp; securityAlarm.IsEnabled)
    {
      var armedStatus = securityAlarm.Parameter("HomeGenie.SecurityArmed");
      if (tableOptions.AutoOff.WhenArmedAway == true &amp;&amp; armedStatus.Value == "Away")
        autoOff = true;
      if (tableOptions.AutoOff.WhenArmedHome == true &amp;&amp; armedStatus.Value == "Home")
        autoOff = true;
    }
  }
  if (!autoOff &amp;&amp; tableOptions.AutoOff.WhenInTimeRange == true &amp;&amp; tableOptions.AutoOff.TimeRange != "")
  {
    autoOff = Scheduler.IsOccurence(date, tableOptions.AutoOff.TimeRange.ToString());
  }
  if (!autoOff &amp;&amp; tableOptions.AutoOff.WhenNoMotion == true)
  {
    var mda = GetDomainAddress(tableOptions.AutoOff.MotionSensor.ToString());
    var module = Modules.InDomain(mda.Domain).WithAddress(mda.Address).Get();
    if (module.Instance != null)
    {
      var lastMotion = DateTime.Now;
      if (module.HasParameter("Sensor.MotionDetect"))
        lastMotion = GetClosestEvent(module.Parameter("Sensor.MotionDetect"), date);
      else if (module.HasParameter("Status.Level"))
        lastMotion = GetClosestEvent(module.Parameter("Status.Level"), date);
      if ((date-lastMotion).TotalMinutes &gt;= (int)tableOptions.AutoOff.MotionTimeout)
        autoOff = true;
    }
  }
  return autoOff;
});

var GetTableSliceAction = new Func&lt;int, string, string, DateTime, ExpandoObject&gt;((tableIndex, tableType, tableSuffix, date)=&gt;{
  dynamic action = new ExpandoObject();
  action.TableIndex = tableIndex;
  action.Index = (int)Math.Floor((date - date.Date).TotalMinutes / timeResolution);
  action.Date = date;
  action.Value = null; // no action
  // table index == 0 =&gt; no table associated, values go from 1 to 10
  if (action.TableIndex &gt; 0)
  {
      // tables are stored as zero-indexed (0 to 9)
      action.TableOptions = GetTableOptions((action.TableIndex - 1).ToString());
	  action.Table = GetTableSettings(tableType + "." + (action.TableIndex - 1) + tableSuffix);
      if (!IsTableDisabled(action.TableOptions, date))
      {
        // default action to "Off"
        action.Value = '0';
        // check table options constraint
        if (!MatchAutoOffOptions(action.TableOptions, date))
          action.Value = action.Table.Value[action.Index];
      }
  }
  return action;
});

var GetModuleAction = new Func&lt;ModuleHelper, string, string, DateTime, ExpandoObject&gt;((module, tableType, tableSuffix, date)=&gt;{

  // current action value
  dynamic action = GetTableSliceAction(GetTableIndex(module, date), tableType, tableSuffix, date);
  // previous action value (it might be a different table when crossing midnight)
  double minuteDiff = ((date.Minute+(date.Second/60d))%timeResolution);
  if (minuteDiff == 0) minuteDiff = timeResolution;
  var previousDate = date.AddMinutes(-minuteDiff);
  action.Previous = GetTableSliceAction(GetTableIndex(module, previousDate), tableType, tableSuffix, previousDate);

  //MigService.Log.Info(JsonConvert.SerializeObject(action));
  return action;
});

var PerformAction = new Func&lt;ModuleHelper, string, dynamic, bool, bool&gt;((module, tableType, action, forceRepeat) =&gt;{
  bool performed = false;
  bool repeat = module.HasFeature("TimeTable.Repeat") || forceRepeat;
  bool externalControl = module.HasFeature("TimeTable.ExternalControl");
  switch (tableType)  
  {
    case "OnOff":
      if (action.Value == '1' &amp;&amp; (action.Previous.Value == '0' || repeat))
      {
        module.Parameter("TimeTable.Status").Value = "ON";
        if (!externalControl)
        {
          Program.Notify("Timetable", module.Instance.Name + " ON");
          module.On();
          performed = true;
        }
      }
      else if (action.Value == '0' &amp;&amp; (action.Previous.Value == '1' || repeat))
      {
        module.Parameter("TimeTable.Status").Value = "OFF";
        if (!externalControl)
        {
          Program.Notify("Timetable", module.Instance.Name + " OFF");
          module.Off();
          performed = true;
        }
      }
      break;
	case "Level":
      // Level values are '0' = Off, '1' = 10%, '2' = 20%, ..., '9' = 90%, 'A' = 100%, 'B' = On
      if (action.Value == 'B' &amp;&amp; (action.Previous.Value != action.Value || repeat))
      {
        module.Parameter("TimeTable.Status").Value = "ON";
        if (!externalControl)
        {
          Program.Notify("Timetable", module.Instance.Name + " ON");
          module.On();
          performed = true;
        }
      }
      else if (action.Value != '0' &amp;&amp; (action.Previous.Value != action.Value || repeat))
      {
        var level = ((int)action.Value - 48);
        if (action.Value == 'A') level = 10;
        module.Parameter("TimeTable.Status").Value = (level * 10).ToString();
        if (!externalControl)
        {
          Program.Notify("Timetable", module.Instance.Name + " Level " + (level * 10) + "%");
          module.Level = level * 10;
          performed = true;
        }
      }
      else if (action.Value == '0' &amp;&amp; (action.Previous.Value != action.Value || repeat))
      {
        module.Parameter("TimeTable.Status").Value = "OFF";
        if (!externalControl)
        {
          Program.Notify("Timetable", module.Instance.Name + " OFF");
          module.Off();
          performed = true;
        }
      }
      break;
    case "Therm":
      var command = module.Command("Thermostat.ModeSet");
      if (action.Value != action.Previous.Value || repeat)
      switch ((char)action.Value)
      {
        case '0':
          Program.Notify("Timetable", module.Instance.Name + " OFF");
          command.Execute("Off");
	      performed = true;
          break;
        case '1':
          Program.Notify("Timetable", module.Instance.Name + " Heat");
          command.Execute("Heat");
	      performed = true;
          break;
        case '2':
          Program.Notify("Timetable", module.Instance.Name + " Cool");
          command.Execute("Cool");
	      performed = true;
          break;
        case '3':
          Program.Notify("Timetable", module.Instance.Name + " Auto");
          command.Execute("Auto");
	      performed = true;
          break;
        case '4':
          Program.Notify("Timetable", module.Instance.Name + " FanOnly");
          command.Execute("FanOnly");
	      performed = true;
          break;
        case '5':
          Program.Notify("Timetable", module.Instance.Name + " AutoChangeover");
          command.Execute("AutoChangeover");
	      performed = true;
          break;
        case '6':
          Program.Notify("Timetable", module.Instance.Name + " HeatEconomy");
          command.Execute("HeatEconomy");
	      performed = true;
          break;
        case '7':
          Program.Notify("Timetable", module.Instance.Name + " CoolEconomy");
          command.Execute("CoolEconomy");
	      performed = true;
          break;
        case '8':
          Program.Notify("Timetable", module.Instance.Name + " Away");
          command.Execute("Away");
	      performed = true;
          break;
      }
      break;
  }
  return performed;
});

var CheckScheduling = new Action&lt;DateTime, int,bool&gt;((date, tableIndex, forceRepeat)=&gt;{
  // if tableIndex == 0, check all tables, otherwise check the given table only (1-10)
  timetableModules.Each((module)=&gt;{
    
    // determine table type
    var tableType = GetTableType(module);    
    // Day Light Saving check
    var tableSuffix = "";
    if (TimeZoneInfo.Local.IsDaylightSavingTime(date) &amp;&amp; module.HasFeature("TimeTable.CheckDST"))
       tableSuffix = ".DST";
    
    // Get action for current module
    dynamic action = GetModuleAction(module, tableType, tableSuffix, date);
    // perform action
    if (action.Value != null &amp;&amp; (tableIndex == 0 || tableIndex == action.TableIndex) &amp;&amp; PerformAction(module, tableType, action, forceRepeat))
    {
      Program.Notify("Timetable", "Performed action from table '" + tableType + "' #" + action.TableIndex + tableSuffix);
    }

    return false; // do not stop iterating, continue processing next module
  });  
});

When.WebServiceCallReceived(MODULE_DOMAIN + "/" + MODULE_ADDRESS, (args)=&gt;{
  var request = args.ToString().Split('/');
  var response = "ERROR";
  var command = request[2];
  ModuleParameter setting = null;
  switch (command)
  {
    case "Calendar.Get":
      response = Program.Store("Calendar").Get("Days").Value;
      break;
    case "Calendar.Set":
      Program.Store("Calendar").Get("Days").Value = request[3];
      CheckScheduling(DateTime.Now, 0, false);
      response = "OK";
      break;
    case "Timetable.Set":
      setting = GetTableSettings(request[3]);
      var slotFrom = int.Parse(request[4]);
      var slotTo = int.Parse(request[5]);
      var slotValue = request[6];
      var slotRangeStart = int.Parse(request[7]);
      var slotRangeEnd = int.Parse(request[8]);
      var newValue = new System.Text.StringBuilder(setting.Value);
      newValue.Remove(slotFrom, slotTo - slotFrom);
      newValue.Insert(slotFrom, new String(slotValue.ToString()[0], slotTo - slotFrom));
      if (slotRangeStart &lt; slotFrom &amp;&amp; setting.Value[slotRangeStart] == slotValue.ToString()[0])
      {
        newValue.Remove(slotRangeStart, slotFrom - slotRangeStart);
        newValue.Insert(slotRangeStart, new String('0', slotFrom - slotRangeStart));
      }
      if (slotRangeEnd &gt; slotTo &amp;&amp; setting.Value[slotRangeEnd - 1] == slotValue.ToString()[0])
      {
        newValue.Remove(slotTo, slotRangeEnd - slotTo);
        newValue.Insert(slotTo, new String('0', slotRangeEnd - slotTo));
      }
      setting.Value = newValue.ToString();
      var tidx = int.Parse(request[3].Substring(request[3].IndexOf(".")+1));
      CheckScheduling(DateTime.Now, tidx+1, false);
      response = "OK";
      break;
    case "Timetable.Get":
      setting = GetTableSettings(request[3]);
      response = setting.Value;
      break;
    case "Timetable.CheckNow":
      CheckScheduling(DateTime.Now, int.Parse(request[3]), false);
   	  break;
    case "Timetable.GetOptions":
      return GetTableOptions(request[3]);
    case "Timetable.SetOptions":
      SetTableOptions(request[3], Uri.UnescapeDataString(request[4]));
      response = "OK";
      break;
    case "Timetable.GetScheduling":
      var schedulingModules = new List&lt;dynamic&gt;();
      Modules.OfDeviceType("Light,Switch,Shutter,Dimmer,Thermostat").Each((mod)=&gt;{
        if (mod.HasFeature("TimeTable.Enable"))
        {
          dynamic tm = new ExpandoObject();
          tm.Domain = mod.Instance.Domain;
          tm.Address = mod.Instance.Address;
          tm.Name = mod.Instance.Name;
          tm.Type = GetTableType(mod);
          //
          var todayDate = DateTime.Now;
          var tableIndex = GetTableIndex(mod, todayDate);
          // Day Light Saving check
          var tableSuffix = "";
          if (TimeZoneInfo.Local.IsDaylightSavingTime(todayDate) &amp;&amp; mod.HasFeature("TimeTable.CheckDST"))
       		tableSuffix = ".DST";
          // Perform action on current module
          if (tableIndex &gt; 0)
          {
            var tableOptions = GetTableOptions((tableIndex - 1).ToString());
            if (!IsTableDisabled(tableOptions, todayDate))
            {
	            // tables are stored as zero indexed
    	        tm.Timetable = GetTableSettings(tm.Type + "." + (tableIndex - 1) + tableSuffix).Value;
            }
          }
          //
          schedulingModules.Add(tm);
        }
        return false;
      });
      return schedulingModules;
    case "Timetable.GetModules":
      var modules = new List&lt;dynamic&gt;();
      Modules.OfDeviceType("Light,Switch,Shutter,Dimmer,Thermostat").Each((mod)=&gt;{
        dynamic tm = new ExpandoObject();
        tm.Domain = mod.Instance.Domain;
        tm.Address = mod.Instance.Address;
        tm.Name = mod.Instance.Name;
        tm.Enabled = mod.HasFeature("TimeTable.Enable");
        tm.Workday = mod.Parameter("TimeTable.Workday").DecimalValue;
        tm.Weekend = mod.Parameter("TimeTable.Weekend").DecimalValue;
        tm.Holiday = mod.Parameter("TimeTable.Holiday").DecimalValue;
        tm.Special = mod.Parameter("TimeTable.Special").DecimalValue;
        tm.CheckDST = mod.HasFeature("TimeTable.CheckDST");
        tm.Repeat = mod.HasFeature("TimeTable.Repeat");
        tm.Type = GetTableType(mod);
        modules.Add(tm);
        return false;
      });
      return modules;
      //return JsonConvert.SerializeObject(modules, Formatting.Indented);
      //break;
  }
  return "{ \"ResponseValue\": \"" + response + "\" }";
});

// module events handling
When.ModuleParameterChanged((module, parameter)=&gt; {
  // check scheduling is security system changed status
  var date = DateTime.Now; // parameter.UpdateTime would be more accurate perhaps
  if (module.Instance.Domain == "HomeAutomation.HomeGenie.Automation" &amp;&amp; module.Instance.Address == "90" &amp;&amp; parameter.Is("HomeGenie.SecurityArmed"))
  {
    CheckScheduling(date, 0, true); // 0 = check all timetable programs
  }
  else if (parameter.Is("Status.Level") || parameter.Is("Sensor.MotionDetect"))
  {
    for (int t = 0; t &lt; programsCount; t++)
    {
      var moduleDomainAddress = module.Instance.Domain+":"+module.Instance.Address;
      var tableOptions = GetTableOptions((t).ToString());
      if (!IsTableDisabled(tableOptions, date) &amp;&amp; tableOptions.AutoOff.WhenNoMotion == true &amp;&amp; tableOptions.AutoOff.MotionSensor == moduleDomainAddress)
      {
        CheckScheduling(date, (t+1), false); // check current timetable program
      }    
    }
  }
  return true;
});

// Timetable control loop
while (Program.IsEnabled)
{
  // Current date with seconds set to 0
  var preciseDate = DateTime.Now;
  preciseDate = preciseDate.AddSeconds(-preciseDate.Second);
  // Run scheduling check
  CheckScheduling(preciseDate, 0, false); // 0 = check all timetable programs
  // Pause until next slice of time of "timeResolution" size
  var nextCheck = (Math.Floor(DateTime.Now.Minute / timeResolution) + 1) * timeResolution;
  var pause = ((nextCheck - DateTime.Now.Minute) * 60) - DateTime.Now.Second;
  Pause(pause);
}
</ScriptSource>
  <ScriptErrors>[]</ScriptErrors>
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>36</Address>
  <Name>Timetable</Name>
  <Description>Widget for scheduling thermostats, lights and shutters.</Description>
  <Group>Scheduling</Group>
  <Features />
  <ActivationTime xsi:nil="true" />
  <TriggerTime xsi:nil="true" />
  <Type>CSharp</Type>
  <IsEnabled>false</IsEnabled>
</ProgramBlock>