<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ConditionType>OnTrue</ConditionType>
  <Conditions />
  <Commands />
  <ScriptCondition>Program.Setup(()=&gt;{

    Program.UseWidget("erx/nest/login");

   	Program.AddOption("NestClientID","", "Nest Client ID", "text");
   	Program.AddOption("NestClientSecret","", "Nest Client Secret", "text");
   	Program.AddOption("NestToken","", "Nest Token", "text");


    //Program.AddFeature("HomeAutomation.NestCamera", "Sensor", "IpCamera.ImageURL", "Camera image API URL (see your camera docs)", "text");
    //Program.AddFeature("HomeAutomation.NestCamera", "Sensor", "IpCamera.Username", "Username (optional)", "text");
    //Program.AddFeature("HomeAutomation.NestCamera", "Sensor", "IpCamera.Password", "Password (optional)", "password");
 
});

return true;</ScriptCondition>
  <ScriptSource>const string MODULES_DOMAIN_STRUCTURE  = "HomeAutomation.NestStructure";
const string MODULES_DOMAIN_THERMOSTAT = "HomeAutomation.NestThermostat";
const string MODULES_DOMAIN_PROTECT = "HomeAutomation.NestProtect";
const string MODULES_DOMAIN_CAMERA = "HomeAutomation.NestCamera";
const string MODULES_DOMAIN_CONFIG = "HomeAutomation.NestConfig";
const string EVENT_DESCRIPTION = "Nest Thermostat";

const string URLAUTH    = "https://home.nest.com/login/oauth2?client_id={0}&amp;state={1}";
const string NESTURL    = "https://developer-api.nest.com?auth={0}";
const string NESTURLUPD = "https://developer-api.nest.com/{0}";
const string URLTOKEN   = "https://api.home.nest.com/oauth2/access_token";

const string DATATOKEN  = "code={0}&amp;client_id={1}&amp;client_secret={2}&amp;grant_type=authorization_code";

String AuthState = "";
bool NeedSetup = true;

Func&lt;string, string, dynamic , string, string&gt; NestUpdate = (string Device, string Path, dynamic  Value, string Type) =&gt; {

	if (Program.Option("NestToken").Value == "")
    	return null;
  
    var client = new System.Net.WebClient();
    try {
        string jsonargs = "{\"" + Path + "\":";
        if (Type != "Text")  
           jsonargs +=  Value + "}";
        else
           jsonargs +=  "\"" + Value + "\"}";
        client.Headers["Cache-Control"] = "no-cache";
        client.Headers["Content-Type"]  = "application/json";
        client.Headers["Authorization"] = "Bearer " + Program.Option("NestToken").Value;

        var res = client.UploadString(String.Format(NESTURLUPD, Device),"PUT", jsonargs);
		return res;
    } finally {
      client.Dispose();
    }
};

Func&lt;ModuleHelper, JToken, JToken, bool&gt; refreshThermostat = (thermostat, thermodata, nestdata) =&gt; {
  
  	var operatingState = thermostat.Parameter("Thermostat.OperatingState");
  	var thermostatMode = thermostat.Parameter("Thermostat.Mode");
  	var fanstate = thermostat.Parameter("Thermostat.FanState");
  	var fanmode = thermostat.Parameter("Thermostat.FanMode");
  
    thermostat.Parameter("Thermostat.StructureId").Value = thermodata["structure_id"].ToString();
    thermostat.Parameter("Thermostat.ThermostatId").Value = thermodata["device_id"].ToString();
    thermostat.Instance.Name = nestdata["structures"][thermodata["structure_id"].ToString()]["name"].ToString() +
        " - " + thermodata["label"].ToString();
//        " - " + nestdata["structures"][thermodata["structure_id"].ToString()]["wheres"][thermodata["where_id"].ToString()]["name"].ToString();

    // State
	switch (thermodata["hvac_state"].ToString()) {
    	case "heating" :
       		if (operatingState.Value != "Heating") {
                operatingState.Value = "Heating";
          		Program.RaiseEvent(thermostat, "Thermostat.OperatingState", "Heating", EVENT_DESCRIPTION);
        	}
   			if (fanstate.Value != "Running") {
       			fanstate.Value = "Running";
       			Program.RaiseEvent(thermostat, "Thermostat.FanState", "Running", EVENT_DESCRIPTION);
     		}
  			break;
     	case "cooling":
       		if (operatingState.Value != "Cooling") {
       		    operatingState.Value = "Cooling";
          		Program.RaiseEvent(thermostat, "Thermostat.OperatingState", "Cooling", EVENT_DESCRIPTION);
       		}
   			if (fanstate.Value != "Running") {
      			fanstate.Value = "Running";
      			Program.RaiseEvent(thermostat, "Thermostat.FanState", "Running", EVENT_DESCRIPTION);
       		}
  			break;
     	case "off":
     		if (thermodata["fan_timer_active"].ToString() == "True") {
       			if (fanstate.Value != "Running") {
          			fanstate.Value = "Running";
          			Program.RaiseEvent(thermostat, "Thermostat.FanState", "Running", EVENT_DESCRIPTION);
        		}
	      		if (operatingState.Value != "Circulate") {
                    operatingState.Value = "Circulate";
          			Program.RaiseEvent(thermostat, "Thermostat.OperatingState", "Circulate", EVENT_DESCRIPTION);
				}
	      		if (fanmode.Value != "Circulate") {
                    fanmode.Value = "Circulate";
    	     		Program.RaiseEvent(thermostat, "Thermostat.FanMode", "Circulate", EVENT_DESCRIPTION);
				}
     		} else {
     			if (fanstate.Value != "") {
	       			fanstate.Value = "";
	       			Program.RaiseEvent(thermostat, "Thermostat.FanState", "", EVENT_DESCRIPTION);
	            }
	      		if (operatingState.Value != "") {
                    operatingState.Value = "";
    	     		Program.RaiseEvent(thermostat, "Thermostat.OperatingState", "", EVENT_DESCRIPTION);
				}
	      		if (fanmode.Value != "Auto") {
                    fanmode.Value = "Auto";
    	     		Program.RaiseEvent(thermostat, "Thermostat.FanMode", "Auto", EVENT_DESCRIPTION);
				}
     		}
  			break;
    }
  
  	var HighSetPoint = thermostat.Parameter("Thermostat.SetPoint.HighSetPoint");
  	var LowSetPoint = thermostat.Parameter("Thermostat.SetPoint.LowSetPoint");
  	var SetPoint = thermostat.Parameter("Thermostat.SetPoint.SetPoint");
    
	if (SetPoint.Value != thermodata["target_temperature_c"].ToString()){
   		SetPoint.Value = thermodata["target_temperature_c"].ToString();
   		Program.RaiseEvent(thermostat, "Thermostat.SetPoint.SetPoint",SetPoint.Value , EVENT_DESCRIPTION);
	} 
	if (LowSetPoint.Value != thermodata["target_temperature_low_c"].ToString()){
   		LowSetPoint.Value = thermodata["target_temperature_low_c"].ToString();
   		Program.RaiseEvent(thermostat, "Thermostat.SetPoint.LowSetPoint",LowSetPoint.Value , EVENT_DESCRIPTION);
	} 
	if (HighSetPoint.Value != thermodata["target_temperature_high_c"].ToString()){
   		HighSetPoint.Value = thermodata["target_temperature_high_c"].ToString();
   		Program.RaiseEvent(thermostat, "Thermostat.SetPoint.HighSetPoint",HighSetPoint.Value , EVENT_DESCRIPTION);
	} 
    
     // Mode
     switch (thermodata["hvac_mode"].ToString()) {
     	case "heat":
       		if (thermostatMode.Value != "Heat") {
          		thermostatMode.Value = "Heat";
          		Program.RaiseEvent(thermostat, "Thermostat.Mode", "Heat", EVENT_DESCRIPTION);
            }
        	break;
     	case "heat-cool":
       		if (thermostatMode.Value != "Auto") {
          		thermostatMode.Value = "Auto";
          		Program.RaiseEvent(thermostat, "Thermostat.Mode", "Auto", EVENT_DESCRIPTION);
        	}
            break;
     	case "cool":
       		if (thermostatMode.Value != "Cool") {
          		thermostatMode.Value = "Cool";
          		Program.RaiseEvent(thermostat, "Thermostat.Mode", "Cool", EVENT_DESCRIPTION);
        	}
  			break;
     	case "off":
       		if (thermostatMode.Value != "") {
          		thermostatMode.Value = "";
          		Program.RaiseEvent(thermostat, "Thermostat.Mode", "", EVENT_DESCRIPTION);
       		}
  			break;
	}
  
     // ambient_temperature_c
   	var sensortemp = thermostat.Parameter("Sensor.Temperature");
    if (sensortemp.Value != thermodata["ambient_temperature_c"].ToString()){
        sensortemp.Value = thermodata["ambient_temperature_c"].ToString();
       	Program.RaiseEvent(thermostat, "Sensor.Temperature",thermodata["ambient_temperature_c"].ToString(), EVENT_DESCRIPTION);
    }
  return true;
};

When.WebServiceCallReceived(MODULES_DOMAIN_THERMOSTAT,( args ) =&gt; {

    try {
        // 1 = Address, 2 = Param, 3 = Sub, 4 = value
  		string[] reqs = ((string)args).Split('/');
      	ModuleHelper thermostat = Modules.InDomain(MODULES_DOMAIN_THERMOSTAT).WithAddress(reqs[1]).Get();
      	string Device = "devices/thermostats/" + thermostat.Parameter("Thermostat.ThermostatId").Value;
        switch (reqs[2]){
          	case "Thermostat.SetPointSet":
            	string type = "";
            	string scale = "c";
            
            	switch (reqs[3]){
              		case "LowSetPoint":
                		type = "low_";
              			break;
              		case "HighSetPoint":
                		type = "high_";
              			break;
            	}
          		NestUpdate(Device,"target_temperature_" + type + scale,reqs[4],"Float");
          		break;
          
          	case "Thermostat.FanModeSet":
            	Program.Notify("Nest ", reqs[3]);
            	if (reqs[3] == "Auto")
              		NestUpdate(Device,"fan_timer_active","false","Boolean");
            	else
                    NestUpdate(Device,"fan_timer_active","true","Boolean");
          		break;

          	case "Thermostat.ModeSet":
            	NestUpdate(Device,"hvac_mode",reqs[3],"Text");
          		break;

        }
    
	} catch (Exception e) { 
        Program.Notify("Nest ERROR!", e.Message);
    }
  
   return "{ \"ResponseValue\" : \"OK\"}";
});

Func&lt;ModuleHelper, JToken, JToken, bool&gt; refreshStructure = (structure, Structure, Data) =&gt; 
{
    structure.Parameter("Structure.StructureId").Value = Structure["structure_id"].ToString();
    structure.Instance.Name = Structure["name"].ToString();

  	var awayMode = structure.Parameter("Away.Mode");

    switch (Structure["away"].ToString()) {
     	case "away":
     	case "auto-away":
       		if (awayMode.Value != "Away") {
          		awayMode.Value = "Away";
          		Program.RaiseEvent(structure, "Away.Mode", "Away", EVENT_DESCRIPTION);
            }
        	break;
		default:
       		if (awayMode.Value != "Home") {
          		awayMode.Value = "Home";
          		Program.RaiseEvent(structure, "Away.Mode", "Home", EVENT_DESCRIPTION);
            }
        	break;
       
    }
	return true;
}; 

When.WebServiceCallReceived(MODULES_DOMAIN_STRUCTURE,( args ) =&gt; {
  
    try
    {
        // 1 = Address, 2 = Param, 3 = Sub, 4 = value
    	string[] reqs = ((string)args).Split('/');
      	ModuleHelper structure = Modules.InDomain(MODULES_DOMAIN_STRUCTURE).WithAddress(reqs[1]).Get();
      	string Device = "structures/" + structure.Parameter("Structure.StructureId").Value;
      
        switch (reqs[2]){
  
        	case "Away.Set":
            	switch (reqs[3]) {
              		case "Home":
	            		NestUpdate(Device,"away","home","Text");
              			break;
              		default:
	            		NestUpdate(Device,"away","away","Text");
              			break;
            	}
          		break;
        }
    } catch (Exception e) { 
        Program.Notify("Nest ERROR!", e.Message);
    }
  	return "{ \"ResponseValue\" : \"OK\"}";
}); 

Func&lt;ModuleHelper, JToken, JToken, bool&gt; refreshProtect = (protect, protectdata, nestdata) =&gt; 
{
    protect.Parameter("Protect.StructureId").Value = protectdata["structure_id"].ToString();
    protect.Parameter("Protect.ProtectId").Value = protectdata["device_id"].ToString();
    protect.Instance.Name = nestdata["structures"][protectdata["structure_id"].ToString()]["name"].ToString() +
        " - " + protectdata["name"].ToString();
//        " - " + nestdata["structures"][protectdata["structure_id"].ToString()]["wheres"][protectdata["where_id"].ToString()]["name"].ToString();
  
    //Program.Notify("Nest ", protect.Parameter("Protect.Status").Value);
  
  	var protectStatus = protect.Parameter("Protect.Status");
    if (protectStatus.Value !=  protectdata["ui_color_state"].ToString()) {
    	protectStatus.Value =  protectdata["ui_color_state"].ToString();
      	Program.RaiseEvent(protect, "Protect.Status", protectStatus.Value, EVENT_DESCRIPTION);
    }

 	var protectCo = protect.Parameter("Protect.CoLevel");
    if (protectCo.Value !=  protectdata["co_alarm_state"].ToString()) {
      	protectCo.Value =  protectdata["co_alarm_state"].ToString();
      	Program.RaiseEvent(protect, "Protect.CoLevel", protectCo.Value, EVENT_DESCRIPTION);
    }
  
 	var protectSmoke = protect.Parameter("Protect.SmokeLevel");
    if (protectSmoke.Value !=  protectdata["smoke_alarm_state"].ToString()) {
      	protectSmoke.Value =  protectdata["smoke_alarm_state"].ToString();
      	Program.RaiseEvent(protect, "Protect.SmokeLevel", protectSmoke.Value, EVENT_DESCRIPTION);
    }
  
 	var protectLast = protect.Parameter("Protect.LastUpdate");
    try {
      	string dt = DateTime.SpecifyKind(DateTime.Parse(protectdata["last_connection"].ToString()),DateTimeKind.Utc).ToLocalTime().ToString();

      	if (protectLast.Value !=  dt) {
        	protectLast.Value =  dt;//        DateTime.SpecifyKind(DateTime.Parse(dateStr),DateTimeKind.Utc)
        	Program.RaiseEvent(protect, "Protect.LastUpdate", protectLast.Value, EVENT_DESCRIPTION);
      	}
    } catch (Exception e) { 
      	if (protectLast.Value != "") {
        	protectLast.Value =  "";
        	Program.RaiseEvent(protect, "Protect.LastUpdate", protectLast.Value, EVENT_DESCRIPTION);
      	}
    }

 	var protectBattery = protect.Parameter("Protect.BatteryLevel");
    if (protectBattery.Value !=  protectdata["battery_health"].ToString()) {
      	protectBattery.Value =  protectdata["battery_health"].ToString();
      	Program.RaiseEvent(protect, "Protect.BatteryLevel", protectBattery.Value, EVENT_DESCRIPTION);
    }
  
    return true;
}; 

When.WebServiceCallReceived(MODULES_DOMAIN_PROTECT,( args ) =&gt; {
  

    try {
        // 1 = Address, 2 = Param, 3 = Sub, 4 = value
      	string[] reqs = ((string)args).Split('/');
    	ModuleHelper structure = Modules.InDomain(MODULES_DOMAIN_STRUCTURE).WithAddress(reqs[1]).Get();
    } catch (Exception e) { 
        Program.Notify("Nest ERROR!", e.Message);
    }
  	return "{ \"ResponseValue\" : \"OK\"}";
}); 


Func&lt;ModuleHelper, JToken, JToken, bool&gt; refreshCamera = (camera, cameradata, nestdata) =&gt; 
{
    camera.Parameter("Camera.StructureId").Value = cameradata["structure_id"].ToString();
    camera.Parameter("Camera.CameraId").Value = cameradata["device_id"].ToString();
    camera.Instance.Name = nestdata["structures"][cameradata["structure_id"].ToString()]["name"].ToString() +
      " - " + cameradata["name"].ToString();
      //  " - " + nestdata["structures"][cameradata["structure_id"].ToString()]["wheres"][cameradata["where_id"].ToString()]["name"].ToString();
  
    //Program.Notify("Nest ", camera.Parameter("IpCamera.ImageURL").Value);
  
  	var cameraUrl = camera.Parameter("IpCamera.ImageURL");
    if (cameraUrl.Value !=  cameradata["snapshot_url"].ToString()) {
      	cameraUrl.Value =  cameradata["snapshot_url"].ToString();
      	Program.RaiseEvent(camera, "IpCamera.ImageURL", cameraUrl.Value, EVENT_DESCRIPTION);
    }
  
  	var cameraLastMotion = camera.Parameter("Camera.LastMotion");
    if (cameraLastMotion.Value !=  cameradata["last_event"]["start_time"].ToString()) {
      	cameraLastMotion.Value =  cameradata["last_event"]["start_time"].ToString();
      	Program.RaiseEvent(camera, "Camera.LastMotion", cameraLastMotion.Value, EVENT_DESCRIPTION);
        Program.RaiseEvent(camera, "Sensor.MotionDetect", "255", "Generic IP Camera");
        Pause(1);
        Program.RaiseEvent(camera, "Sensor.MotionDetect", "0", "Generic IP Camera");
    }
 
    return true;
}; 

Func&lt;string, bool&gt; NestGet =(aCode) =&gt; {
  
    var client = new System.Net.WebClient();
    try {
        client.Headers["content-type"] = "application/x-www-form-urlencoded";
        string postData = String.Format(DATATOKEN,aCode,
                        	  				Program.Option("NestClientID").Value,
                          					Program.Option("NestClientSecret").Value);
        Program.Notify("Nest Data", URLTOKEN + " -- " + postData);
   		var res = client.UploadString(URLTOKEN,"POST", postData);
        JObject jdata = JObject.Parse(res);
        Program.Option("NestToken").Value = jdata["access_token"].ToString();
        Program.Notify("Nest Data", res);
		return true;
    } finally {
      client.Dispose();
    }
  
};

When.WebServiceCallReceived(MODULES_DOMAIN_CONFIG,( args ) =&gt; {
    try {
     	// 1 = Address, 2 = Param, 3 = Sub, 4 = value
      	string[] reqs = ((string)args).Split('/');
 
      	if (reqs[1] == "Data") {
          	return Program.Option("NestData").Value;
        }
      
      	if (reqs[1] == "Callback") {
          	string aCode = "";
          	string aState = "";
          	string[] parms = reqs[2].Split('&amp;');
          	foreach (string parm in parms) {
            	if (parm.Split('=')[0] == "code")
                	aCode = parm.Split('=')[1];
               	if (parm.Split('=')[0] == "state")
                   	aState = parm.Split('=')[1];
            }
          
			if (NestGet(aCode)) {
		       return "&lt;html&gt;&lt;head&gt;&lt;script&gt;function loaded(){window.setTimeout(CloseMe, 500);}function CloseMe(){window.close();}&lt;/script&gt;&lt;/head&gt;&lt;body onLoad=\"loaded()\"&gt;Hello!&lt;/body&gt;";
            } 
     		else {
          		return "{ \"ResponseValue\" : \"OK\"}";
	        }
		}
      
      	if (reqs[1] == "Url") {
          	if (AuthState == "")
				AuthState = Guid.NewGuid().ToString("n").Substring(0, 10); 
    		string url = String.Format(URLAUTH,Program.Option("NestClientID").Value.Trim(), AuthState.Trim());
            return url;
        }
		return "{ \"ResponseValue\" : \"ERROR\", \"Error\":\"Invalid action\"}";

    } catch (Exception e) { 
        Program.Notify("Nest ERROR!", e.Message);
     	return "{ \"ResponseValue\" : \"ERROR\", \"Error\":\"" + e.Message + "\"}";
    }
}); 


Func&lt;string, bool&gt; refreshData = (aData) =&gt; 
{
  
    JObject data = JObject.Parse(aData);

    int T = 0;
    int P = 0;
    int C = 0;
  	int S = 0;

    foreach (JToken structure in data["data"]["structures"])
    {
        //Program.Notify("Nest ", structure.First().ToString());
        S += 1;
        if (NeedSetup &amp;&amp; Modules.InDomain(MODULES_DOMAIN_STRUCTURE).WithAddress(S.ToString()).Get() == null)
            Program.AddVirtualModule("HomeAutomation.NestStructure",S.ToString(), "Sensor", "erx/nest/structure");
  		ModuleHelper Structure = Modules.InDomain(MODULES_DOMAIN_STRUCTURE).WithAddress(S.ToString()).Get();
      
      	if (!refreshStructure(Structure,structure.First(), data["data"]))
	      	return false;
      
        if (structure.First()["thermostats"] != null)
	    foreach (var id in structure.First()["thermostats"])
        {
	        //Program.Notify("Nest Thermo", id.ToString());
        	T += 1;
            if (NeedSetup &amp;&amp; Modules.InDomain(MODULES_DOMAIN_THERMOSTAT).WithAddress(T.ToString()).Get() == null)
	   	        Program.AddVirtualModule("HomeAutomation.NestThermostat", T.ToString(),"Thermostat", "erx/nest/thermostat");
	  		ModuleHelper Thermostat = Modules.InDomain(MODULES_DOMAIN_THERMOSTAT).WithAddress(T.ToString()).Get();
	        //Program.Notify("Nest Thermo", "Module - " + T.ToString());
        	if (!refreshThermostat(Thermostat,data["data"]["devices"]["thermostats"][id.ToString()], data["data"]))
		      	return false;
        }
      
        if (structure.First()["smoke_co_alarms"] != null)
	    foreach (var id in structure.First()["smoke_co_alarms"])
        {
        	P += 1;
            if (NeedSetup &amp;&amp; Modules.InDomain(MODULES_DOMAIN_PROTECT).WithAddress(P.ToString()).Get() == null) 
                  Program.AddVirtualModule("HomeAutomation.NestProtect", P.ToString(), "Sensor", "erx/nest/protect");
	  		ModuleHelper Protect = Modules.InDomain(MODULES_DOMAIN_PROTECT).WithAddress(P.ToString()).Get();
        	if (!refreshProtect(Protect,data["data"]["devices"]["smoke_co_alarms"][id.ToString()], data["data"]))
		      	return false;
        }
      
        if (structure.First()["cameras"] != null)
	    foreach (var id in structure.First()["cameras"])
        {
        	C += 1;
            if (NeedSetup &amp;&amp; Modules.InDomain(MODULES_DOMAIN_CAMERA).WithAddress(C.ToString()).Get() == null) 
                  Program.AddVirtualModule("HomeAutomation.NestCamera",C.ToString(), "Sensor", "erx/nest/camera");
          	ModuleHelper Camera = Modules.InDomain(MODULES_DOMAIN_CAMERA).WithAddress(C.ToString()).Get();
        	if (!refreshCamera(Camera,data["data"]["devices"]["cameras"][id.ToString()], data["data"]))
		      	return false;
        }
    }

    NeedSetup = false;   
   	return true;
};

Func&lt;bool&gt; NestStream = () =&gt;{

  	if (Program.Option("NestToken").Value == "") 
    	return false;
  
  	Program.Notify("Nest Stream", "Start");
  	string aEvent = "";
  	string aData = "";
  	string token = Program.Option("NestToken").Value;
  
  	using (var client = new System.Net.WebClient()) {
	  	client.Headers.Add("Cache-Control","no-cache");
		client.Headers.Add("Accept","text/event-stream");
	    using (var stream = client.OpenRead(String.Format(NESTURL,token))) {
			string line;
    	    using (System.IO.StreamReader reader = new System.IO.StreamReader(stream))
        	while (((line = reader.ReadLine())  != null) &amp;&amp; (token == Program.Option("NestToken").Value)) {
	 			if (line != "") {
                    int x = line.IndexOf(":");
                    if (x &gt;= 0) {
                    	if (line.Substring(0,x) == "event")
                        	aEvent = line.Substring(x+2, line.Length - x - 2);
                    	if (line.Substring(0,x) == "data"){
                        	aData  = line.Substring(x+2, line.Length - x - 2);
                        }
                    } 
            	}
              	else {
                  
              		switch (aEvent) {
              		case "put":
                        Program.Option("NestData").Value = aData;
                        refreshData(aData);
              			break;
              		case "auth_revoked":
	                  	Program.Option("NestToken").Value = "";
						return false;
              		case "keep-alive":
              			break;
                    default:
	                  	Program.Notify("Nest Event", aEvent);
              			break;
            		}
              	}
            }
            stream.Close();
    	}
		Program.Notify("Nest Stream", "End");
    }
    return true;
};



// ****************
// Loop for refresh
// ****************
while (Program.IsEnabled) {
    try {
		NestStream();      
    } catch (Exception e) { 
        Program.Notify("Nest Stream", e.Message);
    }  
    Pause(20);  
    NeedSetup = true;
}

</ScriptSource>
  <ScriptErrors>[]</ScriptErrors>
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>1008</Address>
  <Name>Nest Rest streaming API</Name>
  <Description>Connect to Nest system</Description>
  <Group>ERX</Group>
  <Features />
  <ActivationTime>2017-05-19T04:05:13.647193Z</ActivationTime>
  <TriggerTime>2017-05-19T04:05:13.924607Z</TriggerTime>
  <Type>CSharp</Type>
  <IsEnabled>true</IsEnabled>
</ProgramBlock>