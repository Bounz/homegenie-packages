<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ConditionType>OnTrue</ConditionType>
  <Conditions />
  <Commands />
  <ScriptCondition>Program.AddVirtualModule("Components.Ssd1306", "0", "Sensor", "");
Program.Run();
</ScriptCondition>
  <ScriptSource>#pragma warning disable 0168
#pragma warning disable 0219
#pragma warning disable 0414

const byte SSD1306_I2C_ADDRESS = 0x3C;
//const int displayWidth = 128;  
//const int displayHeight = 64;

int currentX = 0, currentY = 0;


var sdaPin = ConnectorPin.P1Pin03;
var sclPin = ConnectorPin.P1Pin05;
var driver = new I2cDriver(sdaPin.ToProcessor(), sclPin.ToProcessor());
var ssd1306 = new Ssd1306Connection(driver.Connect(SSD1306_I2C_ADDRESS));

// Release allocated resource when program is stopping
When.ProgramStopping(()=&gt;{
  try
  {
    ((IDisposable)driver).Dispose();
  } catch (Exception e) { Program.Notify("SSD 1306 Error", e.Message); }
  return true;
});

var fontFixed = new Fixed1L();
var font2L = new Proportional2L();
var font3L = new Proportional3L();

// HomeGenie Logo
var logo = new byte[]{
  0xC0, 0xF0, 0xF8, 0x1C, 0x0C, 0x06, 0xF6, 0xFE, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0xC0, 0xFE,
  0xFF, 0xFF, 0x7F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00,
  0x00, 0x00, 0xC0, 0xF0, 0xF8, 0xFC, 0x7E, 0x1E, 0x0E, 0x07, 0x03, 0x03, 0x03, 0x23, 0x7E, 0x3E,
  0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x9E,
  0xBE, 0x1C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
  0x01, 0x03, 0x03, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0x3F, 0x07, 0x06, 0x06, 0x86, 0xFE, 0xFF, 0xFF,
  0xFF, 0x0F, 0x00, 0xE0, 0xF8, 0xFC, 0xFE, 0x7F, 0x07, 0x03, 0x01, 0x99, 0xFF, 0xFF, 0x10, 0x10,
  0xD8, 0xFE, 0xFF, 0xFF, 0x7F, 0x0F, 0x03, 0x83, 0xFF, 0xFF, 0xFF, 0xFF, 0x0E, 0x06, 0x03, 0xFF,
  0xFF, 0xFF, 0xFF, 0x04, 0x00, 0x00, 0xE0, 0xF8, 0xFC, 0xFF, 0xDF, 0xC7, 0x41, 0x71, 0x3F, 0x1F,
  0x00, 0x3E, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0xF8, 0xFC, 0xFC, 0x3C,
  0x00, 0xC0, 0xF0, 0xFC, 0xFE, 0xFF, 0xCF, 0xC3, 0x61, 0x71, 0x3F, 0x0F, 0x00, 0xE0, 0xFF, 0xFF,
  0xFF, 0x3F, 0x07, 0x03, 0x83, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0xFF,
  0x1F, 0x00, 0x00, 0xC0, 0xF8, 0xFC, 0xFE, 0xFF, 0xCF, 0xC3, 0x61, 0x39, 0x1F, 0x0F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3C, 0x3F, 0x3F, 0x3F, 0x07, 0x00, 0x00, 0x00, 0x30, 0x3F, 0x3F, 0x3F, 0x1F,
  0x00, 0x00, 0x00, 0x0F, 0x1F, 0x3F, 0x3F, 0x38, 0x38, 0x38, 0x1C, 0x0F, 0x07, 0x01, 0x00, 0x38,
  0x3F, 0x3F, 0x3F, 0x0F, 0x00, 0x00, 0x30, 0x3F, 0x3F, 0x3F, 0x1F, 0x00, 0x00, 0x00, 0x0E, 0x3F,
  0x3F, 0x3F, 0x39, 0x38, 0x18, 0x0E, 0x1F, 0x3F, 0x3F, 0x3F, 0x38, 0x38, 0x38, 0x18, 0x04, 0x00,
  0x00, 0x00, 0x01, 0xE1, 0xF3, 0x73, 0x77, 0x77, 0x67, 0x03, 0xF3, 0xFF, 0xFF, 0x7F, 0x07, 0x00,
  0x00, 0x0F, 0x1F, 0x3F, 0x3F, 0x3C, 0x38, 0x30, 0x38, 0x18, 0x08, 0x04, 0x3E, 0x3F, 0x3F, 0x3F,
  0x07, 0x00, 0x00, 0x00, 0x1F, 0x3F, 0x3F, 0x3F, 0x38, 0x38, 0x1C, 0x0F, 0x3F, 0x3F, 0x3F, 0x3F,
  0x38, 0x18, 0x0C, 0x0F, 0x1F, 0x3F, 0x3F, 0x3C, 0x38, 0x38, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x07, 0x07, 0x0C, 0x0C, 0x0C, 0x0C, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

var drawLogo = new Func&lt;bool&gt;(()=&gt;{
  var data2 = new byte[512+1];
  data2[0] = 0x40;
  Array.Copy(logo, 0, data2, 1, 512);
  ssd1306.DrawImage(data2);
  return true;
});

ssd1306.ClearScreen();
//ssd1306.InvertDisplay();
ssd1306.NormalDisplay();
ssd1306.GotoXY(0, 0);
drawLogo();
ssd1306.GotoXY(0, 4);
ssd1306.DrawText(fontFixed, "Ssd 1306  Driver");
ssd1306.On();

// handles web service calls
When.WebServiceCallReceived("Components.Ssd1306", (args)=&gt;{
  var response = "{ 'ResponseValue' : 'OK' }";
  var cmdParts = args.ToString().Split('/');
  if (cmdParts.Length &lt; 3) return false;
  //
  var nodeId = cmdParts[1];
  var command = cmdParts[2];
  var argument = ""; if (cmdParts.Length &gt; 3) argument = cmdParts[3];
  //
  if (nodeId == "0") // control the OLED display
  {
    switch(command)
    {
      case "Oled.DisplayClear":
      	ssd1306.ClearScreen();
      	break;
      case "Oled.DisplayInvert":
      	ssd1306.InvertDisplay();
      	break;
      case "Oled.DisplayNormal":
      	ssd1306.NormalDisplay();
      	break;
      case "Oled.DisplayOn":
      	ssd1306.On();
      	break;
      case "Oled.DisplayOff":
      	ssd1306.Off();
      	break;
      case "Oled.GoTo":
      	if (cmdParts.Length &lt;= 4) 
        {
          response = "{ 'ResponseValue' : 'INVALID ARGUMENTS' }";
          break;
        }
        int x = currentX = int.Parse(cmdParts[3]);
      	int y = currentY = int.Parse(cmdParts[4]);
      	ssd1306.GotoXY(x, y);
      	break;
      case "Oled.ShowLogo":
      	drawLogo();
      	break;
      case "Oled.DrawText":
      case "Oled.DrawText2":
      case "Oled.DrawText3":
        var align="";
        if (cmdParts.Length &gt; 4)
        {
          // align argument is the 5th parameter
          align = cmdParts[4].ToUpper();
        }
        var text = argument.Replace("%20", " ");
        switch (align)
        {
          case "LEFT":
          text = text.PadRight(16, ' ');
          break;
          case "RIGHT":
          text = text.PadLeft(16, ' ');
          break;
          case "CENTER":
          int spaces = 16 - text.Length; if (spaces &lt; 0) spaces = 0;
          int padLeft = (spaces / 2) + text.Length;
          text = text.PadLeft(padLeft).PadRight(16);          
          break;
        }
      	if (command.EndsWith("2"))
        {
	      	ssd1306.DrawText(font2L, text);
        }
      	else if (command.EndsWith("3"))
        {
	      	ssd1306.DrawText(font3L, text);
        }
      	else
        {
	      	ssd1306.DrawText(fontFixed, text);
        }
      	break;
    }
  }
  return response;
});

Program.GoBackground();</ScriptSource>
  <ScriptErrors>[]</ScriptErrors>
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>64</Address>
  <Name>SSD1306 OLED display (128x64)</Name>
  <Description>Display driver for I2C Ssd 1306 Oled display.</Description>
  <Group>Raspberry Pi</Group>
  <Features />
  <ActivationTime xsi:nil="true" />
  <TriggerTime xsi:nil="true" />
  <Type>CSharp</Type>
  <IsEnabled>false</IsEnabled>
</ProgramBlock>