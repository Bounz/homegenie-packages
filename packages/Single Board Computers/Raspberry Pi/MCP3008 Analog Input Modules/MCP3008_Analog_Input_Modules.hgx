<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ConditionType>OnTrue</ConditionType>
  <Conditions />
  <Commands />
  <ScriptCondition>// Add analog channels modules
Program.AddVirtualModule("Components.MCP3008", "CH0", "Sensor", "homegenie/generic/sensor");
Program.AddVirtualModule("Components.MCP3008", "CH1", "Sensor", "homegenie/generic/sensor");
Program.AddVirtualModule("Components.MCP3008", "CH2", "Sensor", "homegenie/generic/sensor");
Program.AddVirtualModule("Components.MCP3008", "CH3", "Sensor", "homegenie/generic/sensor");
Program.AddVirtualModule("Components.MCP3008", "CH4", "Sensor", "homegenie/generic/sensor");
Program.AddVirtualModule("Components.MCP3008", "CH5", "Sensor", "homegenie/generic/sensor");
Program.AddVirtualModule("Components.MCP3008", "CH6", "Sensor", "homegenie/generic/sensor");
Program.AddVirtualModule("Components.MCP3008", "CH7", "Sensor", "homegenie/generic/sensor");

Program.AddFeature("Components.MCP3008", "Sensor", "AnalogInput.ParameterName", "Parameter name to store computed value", "text");
Program.AddFeature("Components.MCP3008", "Sensor", "AnalogInput.ParameterFactor", "Multiply read raw value by", "text");
Program.AddFeature("Components.MCP3008", "Sensor", "AnalogInput.ParameterAdjust", "Adjust computed value by", "text");
Program.AddFeature("Components.MCP3008", "Sensor", "AnalogInput.StabilizeValue", "Soft stabilize value (yes/no)", "text");

// add program configuration parameters
Program.AddOption("PollFrequency", "10", "Pause between updates (seconds)", "text");

Program.Run();
</ScriptCondition>
  <ScriptSource>const string MCP3008_DOMAIN = "Components.MCP3008";
const decimal voltage = 3.3m;
var valuesHistory = new Queue&lt;decimal&gt;[8];
// Initialize value history queue for Soft Stabilize feature
for (int q = 0; q &lt; 8; q++) valuesHistory[q] = new Queue&lt;decimal&gt;();

// Setup MCP3008 SPI connection
var adcClock = ConnectorPin.P1Pin23.ToProcessor();
var adcMiso = ConnectorPin.P1Pin21.ToProcessor();
var adcMosi = ConnectorPin.P1Pin19.ToProcessor();
var adcCs = ConnectorPin.P1Pin24.ToProcessor();

var driver = GpioConnectionSettings.DefaultDriver;
driver.Allocate(adcClock, PinDirection.Output);
driver.Allocate(adcCs, PinDirection.Output);
driver.Allocate(adcMosi, PinDirection.Output);
driver.Allocate(adcMiso, PinDirection.Input);

var adcConnection = new Mcp3008SpiConnection(
  driver.Out(adcClock),
  driver.Out(adcCs),
  driver.In(adcMiso),
  driver.Out(adcMosi)
);

// Release allocated resource when program is stopping
When.ProgramStopping(()=&gt;{
  try
  {
    ((IDisposable)adcConnection).Dispose();
  } catch (Exception e) { Program.Notify("MCP3008 Error", e.Message); }
  ((IDisposable)driver).Dispose();
  return true;
});

var ReadChannel = new Func&lt;int, AnalogValue&gt;((channel) =&gt; {
  AnalogValue av = null;
  lock (adcConnection)
  {
    av = adcConnection.Read((Mcp3008Channel)(channel));
  }
  return av;
});

// eg: GET /api/Components.MCP3008/CH2/ChannelValue.Get
When.WebServiceCallReceived(MCP3008_DOMAIN, ( args ) =&gt; {
  object response = null;
  var options = ((string)args).Split('/');
  var channel = int.Parse(options[1].Replace("CH", ""));
  var command = options[2];
  if (command == "ChannelValue.Get")
  {
    response = ReadChannel(channel);
  }
  return response;
});

// Main program loop
while (Program.IsEnabled)
{

  double pauseseconds = double.Parse(Program.Option("PollFrequency").Value);
  if (pauseseconds &lt; 1) pauseseconds = 1;

  // read channel voltage values and map/normalize configured parameter names
  for(int x = 0; x &lt; 8; x++)
  {
    var channelPrefix = "CH" + x.ToString();
    var channelModule = Modules.InDomain(MCP3008_DOMAIN).WithAddress(channelPrefix).Get();

    var parameterName = channelModule.Parameter("AnalogInput.ParameterName").Value;
    var parameterFactor = (decimal)channelModule.Parameter("AnalogInput.ParameterFactor").DecimalValue;
    var parameterAdjust = (decimal)channelModule.Parameter("AnalogInput.ParameterAdjust").DecimalValue;

    if (parameterFactor != 0)
    {
      var v = ReadChannel(x).Value;
      valuesHistory[x].Enqueue(v);

      // Software value stabilization
      if (channelModule.Parameter("AnalogInput.StabilizeValue").Value.ToLower().StartsWith("y"))
      {
        decimal avg = 0;
        foreach(decimal sv in valuesHistory[x]) avg += sv;
        v = (decimal)Math.Round(avg / (decimal)valuesHistory[x].Count, 0);
        // prefer smoothed value
        valuesHistory[x].Dequeue();
        valuesHistory[x].Enqueue(v);
      }                	

      if (valuesHistory[x].Count &gt; 5) valuesHistory[x].Dequeue();

      Program.RaiseEvent(channelModule,
                         "Sensor.RawValue",
                         v.ToString(),
                         "Analog Channel");

      if (parameterName != "")
      {
        var adjustedValue = (v * parameterFactor) + parameterAdjust;
        adjustedValue = (Math.Round(adjustedValue * 10m / 5m, 0) * 5m / 10m); // 0.5 resolution
        Program.RaiseEvent(channelModule, 
                           parameterName, 
                           adjustedValue.ToString(), 
                           "Analog Channel");
      }
    }

    Pause(0.05);
  }

  Pause( pauseseconds );
}
</ScriptSource>
  <ScriptErrors>[]</ScriptErrors>
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>38</Address>
  <Name>MCP3008 - Analog Input Modules</Name>
  <Description>MCP3008 8 channels ADC connected to SPI interface. 
Use with Eden Sensor Board http://www.homegenie.it/docs/diy/eden.php
or experiment on a breadboard http://learn.adafruit.com/reading-a-analog-in-and-controlling-audio-volume-with-the-raspberry-pi/overview .
Each analog channel can be mapped to a virtual module with configurable field name.
 
</Description>
  <Group>Raspberry Pi</Group>
  <Features>
    <ProgramFeature>
      <FieldType>text</FieldType>
      <ForDomains>Components.MCP3008</ForDomains>
      <ForTypes>Sensor</ForTypes>
      <Property>AnalogInput.ParameterName</Property>
      <Description>Parameter name to store computed value</Description>
    </ProgramFeature>
    <ProgramFeature>
      <FieldType>text</FieldType>
      <ForDomains>Components.MCP3008</ForDomains>
      <ForTypes>Sensor</ForTypes>
      <Property>AnalogInput.ParameterFactor</Property>
      <Description>Multiply read raw value by</Description>
    </ProgramFeature>
    <ProgramFeature>
      <FieldType>text</FieldType>
      <ForDomains>Components.MCP3008</ForDomains>
      <ForTypes>Sensor</ForTypes>
      <Property>AnalogInput.ParameterAdjust</Property>
      <Description>Adjust computed value by</Description>
    </ProgramFeature>
  </Features>
  <ActivationTime xsi:nil="true" />
  <TriggerTime xsi:nil="true" />
  <Type>CSharp</Type>
  <IsEnabled>false</IsEnabled>
</ProgramBlock>