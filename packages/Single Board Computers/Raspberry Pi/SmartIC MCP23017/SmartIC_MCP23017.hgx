<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ConditionType>OnTrue</ConditionType>
  <Conditions>
    <ProgramCondition>
      <Domain>HomeAutomation.ZWave</Domain>
      <Target>37</Target>
      <Property>Sensor.DoorWindow</Property>
      <ComparisonOperator>Equals</ComparisonOperator>
      <ComparisonValue>255</ComparisonValue>
    </ProgramCondition>
  </Conditions>
  <Commands>
    <ProgramCommand>
      <Domain>HomeAutomation.ZWave</Domain>
      <Target>4</Target>
      <CommandString>Control.Off</CommandString>
      <CommandArguments />
    </ProgramCommand>
  </Commands>
  <ScriptCondition>Program.Run();
</ScriptCondition>
  <ScriptSource>var moduleDomain = "Components.MCP23017";

// This examples will add 32 modules of type "Sensor"
// corresponding to A0-A7 and B0-B7 pins, configured as INPUT or OUTPUT
//
var pinConfigurationA = new List&lt;dynamic&gt;(){
  new { Address =  "1", Pin = Mcp23017Pin.A0, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "2", Pin = Mcp23017Pin.A1, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "3", Pin = Mcp23017Pin.A2, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "4", Pin = Mcp23017Pin.A3, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "5", Pin = Mcp23017Pin.A4, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "6", Pin = Mcp23017Pin.A5, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "7", Pin = Mcp23017Pin.A6, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "8", Pin = Mcp23017Pin.A7, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    //
    new { Address =  "9", Pin = Mcp23017Pin.B0, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "10", Pin = Mcp23017Pin.B1, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "11", Pin = Mcp23017Pin.B2, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "12", Pin = Mcp23017Pin.B3, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "13", Pin = Mcp23017Pin.B4, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "14", Pin = Mcp23017Pin.B5, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "15", Pin = Mcp23017Pin.B6, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "16", Pin = Mcp23017Pin.B7, Direction = Mcp23017PinDirection.Input, PullUpResistor = true }
};

var pinConfigurationB = new List&lt;dynamic&gt;(){
  new { Address =  "17", Pin = Mcp23017Pin.A0, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "18", Pin = Mcp23017Pin.A1, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "19", Pin = Mcp23017Pin.A2, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "20", Pin = Mcp23017Pin.A3, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "21", Pin = Mcp23017Pin.A4, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "22", Pin = Mcp23017Pin.A5, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "23", Pin = Mcp23017Pin.A6, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address =  "24", Pin = Mcp23017Pin.A7, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    //
    new { Address =  "25", Pin = Mcp23017Pin.B0, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "26", Pin = Mcp23017Pin.B1, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "27", Pin = Mcp23017Pin.B2, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "28", Pin = Mcp23017Pin.B3, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "29", Pin = Mcp23017Pin.B4, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "30", Pin = Mcp23017Pin.B5, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "31", Pin = Mcp23017Pin.B6, Direction = Mcp23017PinDirection.Input, PullUpResistor = true },
    new { Address = "32", Pin = Mcp23017Pin.B7, Direction = Mcp23017PinDirection.Input, PullUpResistor = true }
};


bool[] pinStatusA = new bool[16]; 
bool[] pinStatusB = new bool[16];
//
// Change SDA and SCL pins to match your current setup
//
var sdaPin = ConnectorPin.P1Pin03.ToProcessor();
var sclPin = ConnectorPin.P1Pin05.ToProcessor();
//
var driver = new I2cDriver(sdaPin, sclPin);
var deviceConnectionA = new Mcp23017I2cConnection(driver.Connect(0x20));
Pause(0.5);
var deviceConnectionB = new Mcp23017I2cConnection(driver.Connect(0x21));

When.ProgramStopping(()=&gt;{
  ((IDisposable)driver).Dispose();
  return true;
});

// implement Control.On, Control.Off, Control.Toggle serice API
// for the domain Components.MCP23017
When.WebServiceCallReceived(moduleDomain, ( args ) =&gt; {
  string[] reqs = ((string)args).Split('/');
  string returnValue =  "{ 'ResponseValue' : 'OK' }";
  var errormessage = "";
  try
  {
    string pinid = reqs[1];
    string command = reqs[2];
    //
    var module = Modules.InDomain(moduleDomain).WithAddress(pinid).Get();
    // modules with id from 1 to 8 are mapped as A0-A7
    // modules with id from 9 to 16 are mapped as B0-B7
    // modules with id from 17 to 24 are mapped as A0-A7
    // modules with id from 25 to 32 are mapped as B0-B7
    var pinname = "";
    var i = int.Parse(pinid); 
    if (i &gt;=1 &amp;&amp; i &lt;= 8) 
    {
      pinname = "A" + (i - 1).ToString();
    }
    else if  (i &gt;=9 &amp;&amp; i &lt;= 16) 
    {
      pinname = "B" + (i - 9).ToString();
    }      
    else if (i &gt;= 17 &amp;&amp; i &lt;= 24)
    {
      pinname = "A" + (i - 17).ToString();
    }
    else if (i &gt;= 25 &amp;&amp; i &lt;= 32)
    {
      pinname = "B" + (i - 25).ToString();
    }
    //
    var mcppin = (Mcp23017Pin)Enum.Parse(typeof(Mcp23017Pin), pinname);

    if (i &lt;= 16)
    {  
      switch(command)
      {
        // eg. http://hg_address/api/Components.MCP23017/1/Control.On
        case "Control.On":
        deviceConnectionA.SetPinStatus(mcppin, true);
        Program.RaiseEvent(module, "Status.Level", deviceConnectionA.GetPinStatus(mcppin) ? "0" : "1", "MCP23017 A " + pinname);
        break;
        // eg. http://hg_address/api/Components.MCP23017/3/Control.Off
        case "Control.Off":
        deviceConnectionA.SetPinStatus(mcppin, false);
        Program.RaiseEvent(module, "Status.Level", deviceConnectionA.GetPinStatus(mcppin) ? "0" : "1", "MCP23017 A " + pinname);
        break;
        // eg. http://hg_address/api/Components.MCP23017/9/Control.Toggle
        case "Control.Toggle":
        deviceConnectionA.Toogle(mcppin);
        Program.RaiseEvent(module, "Status.Level", deviceConnectionA.GetPinStatus(mcppin) ? "0" : "1", "MCP23017 A " + pinname);
        break;
        // eg. http://hg_address/api/Components.MCP23017/1/Get.Status
        case "Get.Status":
        returnValue = "{ 'ResponseValue' : '" + (deviceConnectionA.GetPinStatus(mcppin) ? "0" : "1") + "' }";
        break;
      }


    } 
    else
    {
      switch(command)
      {
        // eg. http://hg_address/api/Components.MCP23017/1/Control.On
        case "Control.On":
        deviceConnectionB.SetPinStatus(mcppin, true);
        Program.RaiseEvent(module, "Status.Level", deviceConnectionB.GetPinStatus(mcppin) ? "0" : "1", "MCP23017 B " + pinname);
        break;
        // eg. http://hg_address/api/Components.MCP23017/3/Control.Off
        case "Control.Off":
        deviceConnectionB.SetPinStatus(mcppin, false);
        Program.RaiseEvent(module, "Status.Level", deviceConnectionB.GetPinStatus(mcppin) ? "0" : "1", "MCP23017 B " + pinname);
        break;
        // eg. http://hg_address/api/Components.MCP23017/9/Control.Toggle
        case "Control.Toggle":
        deviceConnectionB.Toogle(mcppin);
        Program.RaiseEvent(module, "Status.Level", deviceConnectionB.GetPinStatus(mcppin) ? "0" : "1", "MCP23017 B " + pinname);
        break;
        // eg. http://hg_address/api/Components.MCP23017/1/Get.Status
        case "Get.Status":
        returnValue = "{ 'ResponseValue' : '" + (deviceConnectionB.GetPinStatus(mcppin) ? "0" : "1") + "' }";
        break;
      }


    }


    return returnValue;  
  } 
  catch (Exception ex) 
  { 
    errormessage = ex.Message + " " + ex.StackTrace;
  }
  // unable to process request
  return "{ 'ResponseValue' : 'ERROR " + errormessage + "' }";
});



// Initialize MCP23017 A pins
for (int p = 0; p &lt; pinConfigurationA.Count; p++)
{
  var pincfg = pinConfigurationA[p];
  // set direction and read pin status
  deviceConnectionA.SetDirection(pincfg.Pin, pincfg.Direction);
  pinStatusA[p] = deviceConnectionA.GetPinStatus(pincfg.Pin);
  // associate a virtual module with the pin
  if (pincfg.Direction == Mcp23017PinDirection.Output)
  {
    Program.AddVirtualModule(moduleDomain, pincfg.Address, "Switch", "");                  
  }
  else // Input 
  {
    if (pincfg.PullUpResistor)
    {
      deviceConnectionA.SetResistor(pincfg.Pin, Mcp23017PinResistor.PullUp);
    }
    Program.AddVirtualModule(moduleDomain, pincfg.Address, "Sensor", "homegenie/generic/sensor");                  
  }
  // get the module associated to the pin and store current status
  var module = Modules.InDomain(moduleDomain).WithAddress(pincfg.Address).Get();
  module.Parameter("Status.Level").Value = (pinStatusA[p] ? "0" : "1");
}

// Initialize MCP23017 B pins
for (int p = 0; p &lt; pinConfigurationB.Count; p++)
{
  var pincfg = pinConfigurationB[p];
  // set direction and read pin status
  deviceConnectionB.SetDirection(pincfg.Pin, pincfg.Direction);
  pinStatusB[p] = deviceConnectionB.GetPinStatus(pincfg.Pin);
  // associate a virtual module with the pin
  if (pincfg.Direction == Mcp23017PinDirection.Output)
  {
    Program.AddVirtualModule(moduleDomain, pincfg.Address, "Switch", "");                  
  }
  else // Input 
  {
    if (pincfg.PullUpResistor)
    {
      deviceConnectionB.SetResistor(pincfg.Pin, Mcp23017PinResistor.PullUp);
    }
    Program.AddVirtualModule(moduleDomain, pincfg.Address, "Sensor", "homegenie/generic/sensor");                  
  }
  // get the module associated to the pin and store current status
  var module = Modules.InDomain(moduleDomain).WithAddress(pincfg.Address).Get();
  module.Parameter("Status.Level").Value = (pinStatusB[p] ? "0" : "1");
}

// status polling loop
while (Program.IsEnabled)
{

  Pause(0.1); // 100 ms poll resolution
  //
  for (int p = 0; p &lt; pinConfigurationA.Count; p++)
  {
    var pincfg = pinConfigurationA[p];
    if (pincfg.Direction == Mcp23017PinDirection.Input)
    {
      bool status = deviceConnectionA.GetPinStatus(pincfg.Pin);
      // check if the pin status changed
      if (pinStatusA[p] != status)
      {
        // get the module associated to the pin
        var module = Modules.InDomain(moduleDomain).WithAddress(pincfg.Address).Get();
        // raise the event and update the current pin status
        Program.RaiseEvent(module, "Status.Level",  status ? "0" : "1", "MCP23017 A " + pincfg.Pin.ToString());
        pinStatusA[p] = status;
        Pause(0.1);
      }
    }
  }
  //
  for (int p = 0; p &lt; pinConfigurationB.Count; p++)
  {
    var pincfg = pinConfigurationB[p];
    if (pincfg.Direction == Mcp23017PinDirection.Input)
    {
      bool status = deviceConnectionB.GetPinStatus(pincfg.Pin);
      // check if the pin status changed
      if (pinStatusB[p] != status)
      {
        // get the module associated to the pin
        var module = Modules.InDomain(moduleDomain).WithAddress(pincfg.Address).Get();
        // raise the event and update the current pin status
        Program.RaiseEvent(module, "Status.Level", status ? "0" : "1", "MCP23017 B " + pincfg.Pin.ToString());
        pinStatusB[p] = status;
        Pause(0.1);
      }
    }
  }

}
</ScriptSource>
  <ScriptErrors>[]</ScriptErrors>
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>79</Address>
  <Name>SmartIC - MCP23017</Name>
  <Description>Using 2 MCP23017 I/O expanders connected to 0x20 and 0x21 I2C bus. 
Contributed by Christophe De Boeck.
Based on HomeGenie MCP23017 example app.</Description>
  <Group>Raspberry Pi</Group>
  <Features />
  <ActivationTime xsi:nil="true" />
  <TriggerTime xsi:nil="true" />
  <Type>CSharp</Type>
  <IsEnabled>false</IsEnabled>
</ProgramBlock>