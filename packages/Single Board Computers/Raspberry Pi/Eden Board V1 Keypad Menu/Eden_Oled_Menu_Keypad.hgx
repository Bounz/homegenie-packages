<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ConditionType>OnTrue</ConditionType>
  <Conditions />
  <Commands />
  <ScriptCondition>// Put your trigger code logic here.
// Call 'hg.SetConditionTrue()' when you want
// the 'Code To Run' to be executed.
hg.Program.Setup(function(){
  hg.Program.AddInputField("EdenDisplay.Thermostat", "", "Thermostat name");
  hg.Program.AddFeature("", "Dimmer,Light,Switch,Shutter", "EdenDisplay.ToggleButton", "Toggle", "text");
  hg.Program.AddFeature("", "Dimmer,Light,Switch,Shutter", "EdenDisplay.OnButton", "On", "text");
  hg.Program.AddFeature("", "Dimmer,Light,Switch,Shutter", "EdenDisplay.OffButton", "Off", "text");
});
hg.SetConditionTrue();
</ScriptCondition>
  <ScriptSource>// Get a reference to the OLED object
var oled = hg.Modules.InDomain("Components.Ssd1306").WithAddress("0");

// Get a reference to other programs of which data will be displayed on the OLED screen
var thermostatName = hg.Program.InputField("EdenDisplay.Thermostat").Value;
var thermostat = hg.Modules.WithName(thermostatName).Get();
var setPoint = thermostat.Parameter("Thermostat.SetPoint.Heating");
var securitySystem = hg.Modules.WithName("Security Alarm System").Get();
var securityArmed = securitySystem.Parameter("HomeGenie.SecurityArmed");

// Global state variables
var currentContext = '';
var displayMode = 'normal';
var lastButton = '';
var startPressTs = new Date().getTime();
// This system wide parameter is used to prevent other apps
// from writing on the OLED screen  when the menu is open
hg.Settings.Parameter('EdenDisplay.MenuMode').Value = 'OFF';

// Menu screens

function menuShowMain()
{
  oled.Command("Oled.GoTo").Execute("0/3");
  oled.Command("Oled.DrawText").Execute("----[ MENU ]----");
  oled.Command("Oled.GoTo").Execute("0/4");
  oled.Command("Oled.DrawText").Execute("1 Thermostat/LEFT");
  oled.Command("Oled.GoTo").Execute("0/5");
  oled.Command("Oled.DrawText").Execute("2 Security/LEFT");
  oled.Command("Oled.GoTo").Execute("0/6");
  oled.Command("Oled.DrawText").Execute("3 Scenarios/LEFT");
  oled.Command("Oled.GoTo").Execute("0/7");
  oled.Command("Oled.DrawText").Execute("4 Exit/LEFT");
}

function menuShowSetPoint()
{
  oled.Command("Oled.GoTo").Execute("0/3");
  oled.Command("Oled.DrawText").Execute("/LEFT");
  oled.Command("Oled.GoTo").Execute("0/4");
  oled.Command("Oled.DrawText").Execute("Set Point:/LEFT");
  oled.Command("Oled.GoTo").Execute("0/5");
  oled.Command("Oled.DrawText2").Execute(setPoint.Value + "/CENTER");
  oled.Command("Oled.GoTo").Execute("0/7");
  oled.Command("Oled.DrawText").Execute("2 + 3 -   EXIT 4/CENTER");  
}

function menuShowSecurity()
{
  var level = securitySystem.Parameter("Status.Level");
  oled.Command("Oled.GoTo").Execute("0/3");
  oled.Command("Oled.DrawText").Execute("/LEFT");
  oled.Command("Oled.GoTo").Execute("0/4");
  oled.Command("Oled.DrawText").Execute("Security:/LEFT");
  oled.Command("Oled.GoTo").Execute("0/5");
  oled.Command("Oled.DrawText2").Execute((securityArmed.DecimalValue &gt; 0 || level.DecimalValue &gt; 0 ? "ARMED" : "DISARMED") + "/CENTER");
  oled.Command("Oled.GoTo").Execute("0/7");
  if (securityArmed.DecimalValue &gt; 0 || level.DecimalValue &gt; 0)
  {
    oled.Command("Oled.DrawText").Execute("2 DISARM  EXIT 4/CENTER");
  }
  else
  {
    oled.Command("Oled.DrawText").Execute("2 ARM     EXIT 4/CENTER");
  }
}

// Context switch functions

function setContext(ctx)
{
  currentContext = ctx;
  hg.Settings.Parameter('EdenDisplay.MenuMode').Value = 'ON';
  switch(ctx)
  {
    case 'main':
      menuShowMain();
      break;
    case 'setpoint':
      menuShowSetPoint();
      break;
    case 'security':
      menuShowSecurity();
      break;
    case 'energysaving':
      menuShowEnergySaving();
      break;
    case 'exit':
      currentContext = '';
      oled.Command("Oled.GoTo").Execute("0/3");
      oled.Command("Oled.DrawText").Execute("/CENTER");
      oled.Command("Oled.GoTo").Execute("0/4");
      oled.Command("Oled.ShowLogo").Execute();
      hg.Pause(2);
      hg.Settings.Parameter('EdenDisplay.MenuMode').Value = 'OFF';
      break;
  }
}

function setContextInput(input)
{
  switch (input)
  {
    case '1': // BUTTON #1
      switch (currentContext)
      {
        case 'main':
          setContext('setpoint');
          break;
      }
      break;
    case '2': // BUTTON #2
      switch (currentContext)
      {
        case 'main':
          setContext('security');
          break;
        case 'setpoint':
          thermostat.Command("Thermostat.SetPointSet").Execute("Heating/" + (setPoint.DecimalValue + 1));
          menuShowSetPoint();
          break;
        case 'security':
          if (securityArmed.DecimalValue == 0)
          {
            securitySystem.Command("Control.On").Execute();
          }
          else
          {
            securitySystem.Command("Control.Off").Execute();
          }
          menuShowSecurity();
          break;
      }
      break;
    case '3': // BUTTON #3
      switch (currentContext)
      {
        case 'main':
          if (displayMode == 'normal')
          {
            displayMode = 'inverse';
            oled.Command("Oled.DisplayInvert").Execute();
          }
          else
          {
            displayMode = 'normal';
            oled.Command("Oled.DisplayNormal").Execute();
          }
          break;
        case 'setpoint':
          thermostat.Command("Thermostat.SetPointSet").Execute("Heating/" + (setPoint.DecimalValue - 1));
          menuShowSetPoint();
          break;
      }
      break;
    case '4': // BUTTON #4
      switch (currentContext)
      {
        case 'main':
          setContext('exit');
          break;
        default:
          setContext('main');
          break;
      }
      break;
  }

}

hg.When.ModuleParameterChange(function(module, parameter) {
  if (module.Instance.Address == 'Keypad' &amp;&amp; parameter.Is('NumericPad.Key') &amp;&amp; parameter.Value != '')
  {
    var keyPressed = parameter.Value;
    // A button was pressed, store the timestamp
    startPressTs = new Date().getTime();
    if (currentContext == '')
    {
      if (keyPressed == "#")
      {
        setContext('main');
      }
      else
      {
        hg.Modules.WithParameter('EdenDisplay.ToggleButton').Each(function(module){
          if (module.Parameter('EdenDisplay.ToggleButton').Value == keyPressed)
          {
            module.Toggle();
          }
          else if (module.Parameter('EdenDisplay.OnButton').Value == keyPressed)
          {
            module.On();
          }
          else if (module.Parameter('EdenDisplay.OffButton').Value == keyPressed)
          {
            module.Off();
          }
          return false;
        });
      }
      return true;
    }
    else
    {
      setContextInput(keyPressed);
    }
  }
  else if (parameter.Is("HomeGenie.SecurityArmed") &amp;&amp; currentContext == "security")
  {
    // update security menu
    menuShowSecurity();
  }
  return true;
});

hg.Program.GoBackground();
</ScriptSource>
  <ScriptErrors />
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>1018</Address>
  <Name>Eden Oled Menu for numeric keypad</Name>
  <Description>Eden settings menu and device/scenario control buttons. Specify buttons for module Toggle, On, Off actions. Also multiple buttons can be entered for activating the same action.</Description>
  <Group>Raspberry Pi</Group>
  <Features>
    <ProgramFeature>
      <FieldType>text</FieldType>
      <ForDomains />
      <ForTypes>Dimmer,Light,Switch,Shutter</ForTypes>
      <Property>EdenDisplay.ToggleButton</Property>
      <Description>Toggle</Description>
    </ProgramFeature>
    <ProgramFeature>
      <FieldType>text</FieldType>
      <ForDomains />
      <ForTypes>Dimmer,Light,Switch,Shutter</ForTypes>
      <Property>EdenDisplay.OnButton</Property>
      <Description>On</Description>
    </ProgramFeature>
    <ProgramFeature>
      <FieldType>text</FieldType>
      <ForDomains />
      <ForTypes>Dimmer,Light,Switch,Shutter</ForTypes>
      <Property>EdenDisplay.OffButton</Property>
      <Description>Off</Description>
    </ProgramFeature>
  </Features>
  <ActivationTime>2016-01-20T14:58:50.134152Z</ActivationTime>
  <TriggerTime>2016-01-20T14:59:07.346703Z</TriggerTime>
  <Type>Javascript</Type>
  <IsEnabled>true</IsEnabled>
</ProgramBlock>