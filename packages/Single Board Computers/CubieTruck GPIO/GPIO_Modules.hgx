<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ConditionType>OnTrue</ConditionType>
  <Conditions />
  <Commands />
  <ScriptCondition>// Connector CN8
Program.AddOption("Gpio.PC19", "OFF", "#03 PC19", "text");
Program.AddOption("Gpio.PC21", "OFF", "#04 PC21", "text");
Program.AddOption("Gpio.PC20", "OFF", "#05 PC20", "text");
Program.AddOption("Gpio.PC22", "OFF", "#06 PC22", "text");
Program.AddOption("Gpio.PB14", "OFF", "#07 PB14", "text");
Program.AddOption("Gpio.PB16", "OFF", "#08 PB16", "text");
Program.AddOption("Gpio.PB15", "OFF", "#09 PB15", "text");
Program.AddOption("Gpio.PB17", "OFF", "#10 PB17", "text");
Program.AddOption("Gpio.PI20", "OFF", "#11 PI20", "text");
Program.AddOption("Gpio.PI14", "OFF", "#12 PI14", "text");
Program.AddOption("Gpio.PI21", "OFF", "#13 PI21", "text");
Program.AddOption("Gpio.PI15", "OFF", "#14 PI15", "text");
Program.AddOption("Gpio.PI03", "OFF", "#15 PI03", "text");
Program.AddOption("Gpio.PB03", "OFF", "#16 PB03", "text");
Program.AddOption("Gpio.PB02", "OFF", "#17 PB02", "text");
Program.AddOption("Gpio.PB04", "OFF", "#18 PB04", "text");
Program.AddOption("Gpio.PB18", "OFF", "#19 PB18", "text");
Program.AddOption("Gpio.PB19", "OFF", "#20 PB19", "text");
// Connector CN9
Program.AddOption("Gpio.PG00", "OFF", "#21 PG00", "text");
Program.AddOption("Gpio.PG03", "OFF", "#22 PG03", "text");
Program.AddOption("Gpio.PG02", "OFF", "#23 PG02", "text");
Program.AddOption("Gpio.PG01", "OFF", "#24 PG01", "text");
Program.AddOption("Gpio.PG04", "OFF", "#25 PG04", "text");
Program.AddOption("Gpio.PG05", "OFF", "#26 PG05", "text");
Program.AddOption("Gpio.PG06", "OFF", "#27 PG06", "text");
Program.AddOption("Gpio.PG07", "OFF", "#28 PG07", "text");
Program.AddOption("Gpio.PG08", "OFF", "#29 PG08", "text");
Program.AddOption("Gpio.PG09", "OFF", "#30 PG09", "text");
Program.AddOption("Gpio.PG10", "OFF", "#31 PG10", "text");
Program.AddOption("Gpio.PG11", "OFF", "#32 PG11", "text");

Program.Run();
</ScriptCondition>
  <ScriptSource>var moduleDomain = "CubieBoard.Gpio";

var pinMapping = new List&lt;dynamic&gt;();
// read GPIO configuration
// GPIO on connector CN8
var pc19 = Program.Option("Gpio.PC19").Value.ToLower();
var pc21 = Program.Option("Gpio.PC21").Value.ToLower();
var pc20 = Program.Option("Gpio.PC20").Value.ToLower();
var pc22 = Program.Option("Gpio.PC22").Value.ToLower();
var pb14 = Program.Option("Gpio.PB14").Value.ToLower();
var pb16 = Program.Option("Gpio.PB16").Value.ToLower();
var pb15 = Program.Option("Gpio.PB15").Value.ToLower();
var pb17 = Program.Option("Gpio.PB17").Value.ToLower();
var pi20 = Program.Option("Gpio.PI20").Value.ToLower();
var pi14 = Program.Option("Gpio.PI14").Value.ToLower();
var pi21 = Program.Option("Gpio.PI21").Value.ToLower();
var pi15 = Program.Option("Gpio.PI15").Value.ToLower();
var pi03 = Program.Option("Gpio.PI03").Value.ToLower();
var pb03 = Program.Option("Gpio.PB03").Value.ToLower();
var pb02 = Program.Option("Gpio.PB02").Value.ToLower();
var pb04 = Program.Option("Gpio.PB04").Value.ToLower();
var pb18 = Program.Option("Gpio.PB18").Value.ToLower();
var pb19 = Program.Option("Gpio.PB19").Value.ToLower();
// GPIO on connector CN9
var pg00 = Program.Option("Gpio.PG00").Value.ToLower();
var pg03 = Program.Option("Gpio.PG03").Value.ToLower();
var pg02 = Program.Option("Gpio.PG02").Value.ToLower();
var pg01 = Program.Option("Gpio.PG01").Value.ToLower();
var pg04 = Program.Option("Gpio.PG04").Value.ToLower();
var pg05 = Program.Option("Gpio.PG05").Value.ToLower();
var pg06 = Program.Option("Gpio.PG06").Value.ToLower();
var pg07 = Program.Option("Gpio.PG07").Value.ToLower();
var pg08 = Program.Option("Gpio.PG08").Value.ToLower();
var pg09 = Program.Option("Gpio.PG09").Value.ToLower();
var pg10 = Program.Option("Gpio.PG10").Value.ToLower();
var pg11 = Program.Option("Gpio.PG11").Value.ToLower();

// add configured GPIOs to a list that will be used to configure the connection
// GPIO on connector CN8
if (pc19 != "off") pinMapping.Add(new { Config = pc19, Address = "PC19", Pin = ConnectorPin.CB3_CN8Pin05, Direction = (pc19 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pc21 != "off") pinMapping.Add(new { Config = pc21, Address = "PC21", Pin = ConnectorPin.CB3_CN8Pin06, Direction = (pc21 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pc20 != "off") pinMapping.Add(new { Config = pc20, Address = "PC20", Pin = ConnectorPin.CB3_CN8Pin07, Direction = (pc20 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pc22 != "off") pinMapping.Add(new { Config = pc22, Address = "PC22", Pin = ConnectorPin.CB3_CN8Pin08, Direction = (pc22 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb14 != "off") pinMapping.Add(new { Config = pb14, Address = "PB14", Pin = ConnectorPin.CB3_CN8Pin09, Direction = (pb14 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb16 != "off") pinMapping.Add(new { Config = pb16, Address = "PB16", Pin = ConnectorPin.CB3_CN8Pin10, Direction = (pb16 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb15 != "off") pinMapping.Add(new { Config = pb15, Address = "PB15", Pin = ConnectorPin.CB3_CN8Pin11, Direction = (pb15 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb17 != "off") pinMapping.Add(new { Config = pb17, Address = "PB17", Pin = ConnectorPin.CB3_CN8Pin12, Direction = (pb17 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pi20 != "off") pinMapping.Add(new { Config = pi20, Address = "PI20", Pin = ConnectorPin.CB3_CN8Pin15, Direction = (pi20 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pi14 != "off") pinMapping.Add(new { Config = pi14, Address = "PI14", Pin = ConnectorPin.CB3_CN8Pin16, Direction = (pi14 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pi21 != "off") pinMapping.Add(new { Config = pi21, Address = "PI21", Pin = ConnectorPin.CB3_CN8Pin17, Direction = (pi21 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pi15 != "off") pinMapping.Add(new { Config = pi15, Address = "PI15", Pin = ConnectorPin.CB3_CN8Pin18, Direction = (pi15 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pi03 != "off") pinMapping.Add(new { Config = pi03, Address = "PI03", Pin = ConnectorPin.CB3_CN8Pin19, Direction = (pi03 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb03 != "off") pinMapping.Add(new { Config = pb03, Address = "PB03", Pin = ConnectorPin.CB3_CN8Pin20, Direction = (pb03 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb02 != "off") pinMapping.Add(new { Config = pb02, Address = "PB02", Pin = ConnectorPin.CB3_CN8Pin21, Direction = (pb02 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb04 != "off") pinMapping.Add(new { Config = pb04, Address = "PB04", Pin = ConnectorPin.CB3_CN8Pin22, Direction = (pb04 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb18 != "off") pinMapping.Add(new { Config = pb18, Address = "PB18", Pin = ConnectorPin.CB3_CN8Pin23, Direction = (pb18 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pb19 != "off") pinMapping.Add(new { Config = pb19, Address = "PB19", Pin = ConnectorPin.CB3_CN8Pin25, Direction = (pb19 == "out" ? PinDirection.Output : PinDirection.Input) });
// GPIO on connector CN9
if (pg00 != "off") pinMapping.Add(new { Config = pg00, Address = "PG00", Pin = ConnectorPin.CB3_CN9Pin03, Direction = (pg00 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg03 != "off") pinMapping.Add(new { Config = pg03, Address = "PG03", Pin = ConnectorPin.CB3_CN9Pin04, Direction = (pg03 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg02 != "off") pinMapping.Add(new { Config = pg02, Address = "PG02", Pin = ConnectorPin.CB3_CN9Pin05, Direction = (pg02 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg01 != "off") pinMapping.Add(new { Config = pg01, Address = "PG01", Pin = ConnectorPin.CB3_CN9Pin06, Direction = (pg01 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg04 != "off") pinMapping.Add(new { Config = pg04, Address = "PG04", Pin = ConnectorPin.CB3_CN9Pin07, Direction = (pg04 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg05 != "off") pinMapping.Add(new { Config = pg05, Address = "PG05", Pin = ConnectorPin.CB3_CN9Pin08, Direction = (pg05 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg06 != "off") pinMapping.Add(new { Config = pg06, Address = "PG06", Pin = ConnectorPin.CB3_CN9Pin09, Direction = (pg06 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg07 != "off") pinMapping.Add(new { Config = pg07, Address = "PG07", Pin = ConnectorPin.CB3_CN9Pin10, Direction = (pg07 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg08 != "off") pinMapping.Add(new { Config = pg08, Address = "PG08", Pin = ConnectorPin.CB3_CN9Pin11, Direction = (pg08 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg09 != "off") pinMapping.Add(new { Config = pg09, Address = "PG09", Pin = ConnectorPin.CB3_CN9Pin12, Direction = (pg09 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg10 != "off") pinMapping.Add(new { Config = pg10, Address = "PG10", Pin = ConnectorPin.CB3_CN9Pin13, Direction = (pg10 == "out" ? PinDirection.Output : PinDirection.Input) });
if (pg11 != "off") pinMapping.Add(new { Config = pg11, Address = "PG11", Pin = ConnectorPin.CB3_CN9Pin14, Direction = (pg11 == "out" ? PinDirection.Output : PinDirection.Input) });

// Setup the connection to the GPIOs
var configuration = new PinConfiguration[pinMapping.Count];
for (int p = 0; p &lt; pinMapping.Count; p++)
{
  	var pc = pinMapping[p];
  	if (pc.Direction == PinDirection.Input)
    {
	  	configuration[p] = new InputPinConfiguration(PinMapping.ToProcessor(pc.Pin));
      	if (pc.Config.EndsWith("+"))
        {
            ((InputPinConfiguration)configuration[p]).Resistor = PinResistor.PullUp;
        }
      	else if (pc.Config.EndsWith("-"))
        {
            ((InputPinConfiguration)configuration[p]).Resistor = PinResistor.PullDown;
        }
		Program.AddVirtualModule(moduleDomain, pc.Address, "Sensor", "homegenie/generic/sensor");                  
    }
  	else
    {
	  	configuration[p] = new OutputPinConfiguration(PinMapping.ToProcessor(pc.Pin));
		Program.AddVirtualModule(moduleDomain, pc.Address, "Switch", "");                  
    }
    configuration[p].Name = pc.Address;
}

// Allocate GPIO connection and listen for events coming from GPIO pins
GpioConnection connection = null;
try
{
	connection = new GpioConnection(configuration);
}
catch 
{
  	Program.Notify("GPIO Modules", "ERROR: could not allocate some GPIO!\nPlease set to OFF GPIO\nthat are already in use.");
  	Pause(10);
  	return;
}

var pinChanged = new EventHandler&lt;PinStatusEventArgs&gt;((sender, args) =&gt; {
  	var address = args.Configuration.Name;
    var module = Modules.InDomain(moduleDomain).WithAddress(address).Get();
    Program.RaiseEvent(module, "Status.Level", 
                       args.Enabled ? "1" : "0",
                       address);
  
});
connection.PinStatusChanged += pinChanged;

When.ProgramStopping(()=&gt;{
  connection.PinStatusChanged -= pinChanged;
  ((IDisposable)connection).Dispose();
  return true;
});

// read and store current pins status
for (int p = 0; p &lt; pinMapping.Count; p++)
{
  	var pc = pinMapping[p];
  	var address = pc.Address;
    var module = Modules.InDomain(moduleDomain).WithAddress(address).Get();
	module.Parameter("Status.Level").Value = (connection[address] ? "1" : "0");
}

// implement web serice API Control.On, Control.Off, Control.Toggle 
// for the domain RaspberryPi.GPIO
When.WebServiceCallReceived(moduleDomain, ( args ) =&gt; 
{
	string[] reqs = ((string)args).Split('/');
  	var errorMessage = "";
	try
	{
		string address = reqs[1];
      	string command = reqs[2];
        //
        switch(command)
        {
          // eg. http://hg_address/api/RaspberryPi.GPIO/1/Control.On
          case "Control.On":
          connection[address] = true;
          break;
          // eg. http://hg_address/api/RaspberryPi.GPIO/3/Control.Off
          case "Control.Off":
          connection[address] = false;
          break;
          // eg. http://hg_address/api/RaspberryPi.GPIO/9/Control.Toggle
          case "Control.Toggle":
          connection.Toggle(address);
          break;
        }
      	//
        return "{ 'ResponseValue' : 'OK' }";    
    } 
  	catch (Exception ex) 
    { 
	    errorMessage = ex.Message + " " + ex.StackTrace;
    }
    // unable to process request
    return "{ 'ResponseValue' : 'ERROR " + errorMessage + "' }";
});

Program.GoBackground();</ScriptSource>
  <ScriptErrors>[]</ScriptErrors>
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>150</Address>
  <Name>GPIO Modules</Name>
  <Description>CubieTruck/CubieBoard3 GPIOs mapped to HG modules.
Each GPIO can be configured as input (IN), output (OUT) or can be disabled (OFF).
GPIOs configured as IN are mapped to a Sensor module with a Status.Level field displaying current pin level (0, 1).
GPIOs configured as OUT are mapped to a Switch module that can be controlled with on/off commands.
</Description>
  <Group>CubieTruck</Group>
  <Features />
  <ActivationTime xsi:nil="true" />
  <TriggerTime xsi:nil="true" />
  <Type>CSharp</Type>
  <IsEnabled>false</IsEnabled>
</ProgramBlock>