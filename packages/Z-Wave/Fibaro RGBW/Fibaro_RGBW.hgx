<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ConditionType>OnTrue</ConditionType>
  <Conditions />
  <Commands />
  <ScriptCondition>// A "return true;" statement at any point of this code block, will cause the program to run.
// For manually activated program, just leave a "return false" statement here.

/*
	Knowledge of Controller Fibaro RGWM-441
	---------------------------------------
Version 1.0
Date : 06/02/2014
Author : DaniMail

MultiLevel Switch (Dimmer) :
4 channels MultiLevel -&gt; R G B W
4 channels MultiSensor attached to each MultiLevel Dimmer

Principal Instance :
	     Control.Level 0 to 99 of the last color adjusted.
	     Control.On Control.Off accepted

It as 5 other Instances :
Instance 1 : Control.Level 0 to 99 of the last color adjusted. 
	     Control.On Control.Off not accepted
Instance 2 : Control.Level 0 to 99 for Red Channel. 
	     Control.On Control.Off not accepted
Instance 3 : Control.Level 0 to 99 for Green Channel. 
	     Control.On Control.Off not accepted
Instance 4 : Control.Level 0 to 99 for Blue Channel. 
	     Control.On Control.Off not accepted
Instance 5 : Control.Level 0 to 99 for White Channel. 
	     Control.On Control.Off not accepted

Is as 2 principaly parameters that affect the outputs :
Parameter 14 :
	     This parameter affect the action of the 4 input sensor
	     Default value : 4369 (Momentary Normal Mode) -&gt; With this value each input 
		is attached to manually switch on color R G B W
	     For exemple, if the value is 13107 (Momentary Rainbow)-&gt; If any switch is On, 
		it's generate a graduated variation of the color until is Off.   

Parameter 72 :
	     This parameter set the automatic program running on the module.
	     Default value : 1
	     Value 1 to 5 : User programs to define
	     Value 6 to 10 : Programs predefined on the module
		6 : -&gt; Fast brigtness variation of clear green color
		7 : -&gt; Hard blue with spaced white flashes
		8 : -&gt; Slow color variation of R G B spectrum
		9 : -&gt; Slow color variation of pastel colors spectrum
		10 : -&gt; Fast flashes between Red and Blue

Actually I don't have any specs on how to set User program.
I think it's actually possible only with "Fibaro Home Center 2".
*/
Modules.InDomain("HomeAutomation.ZWave").WithParameter("ZWaveNode.ManufacturerSpecific").Each((m)=&gt; {
  if( m.Parameter("ZWaveNode.ManufacturerSpecific").Value == "010F:0900:1000" )
  {
    Program.AddVirtualModule("HomeAutomation.FibaroRGBW", m.Instance.Address, "Dimmer","DaniMail/fibaro/rgbw");
    // Added temporary until Switch.MultiLevel.GetCount works properly 
    for (int i = 1; i &lt;= 5 ; i++)
    {
      string address = m.Instance.Address + "." + i.ToString();
      Program.AddVirtualModule(m.Instance.Domain, address, "Dimmer", "homegenie/generic/dimmer");
    }
    // End of Added
  }
  return false ;
});
Program.Run();</ScriptCondition>
  <ScriptSource>// Program.Option("ZWaveModule").Value  
// - http://&lt;hg_address&gt;/api/HomeAutomation.FibaroRGBW/...
// - Version : 1.0
// - Date : 06/02/2014
// - Author : DaniMail

Func&lt;string, string, bool&gt; bridgeapicall = (string lightnumber, string parameter) =&gt; 
{
  var moduleRaise = Modules.InDomain("HomeAutomation.FibaroRGBW").WithAddress(lightnumber).Get();
  var parentModule = Modules.InDomain("HomeAutomation.ZWave").WithAddress(lightnumber).Get();
  string[] values = parameter.Split(',');
  
  double level = (double.Parse(values[0].Replace(",", "."), CultureInfo.InvariantCulture)/255D)*99D ;
  int iRed = (int)Math.Truncate(level) ;
  parentModule.Command("MultiInstance.Set").Set("Switch.MultiLevel/2/" + ((int)iRed).ToString());

  level = (double.Parse(values[1].Replace(",", "."), CultureInfo.InvariantCulture)/255D)*99D ;
  int iGreen = (int)Math.Truncate(level) ;
  parentModule.Command("MultiInstance.Set").Set("Switch.MultiLevel/3/" + ((int)iGreen).ToString());

  level = (double.Parse(values[2].Replace(",", "."), CultureInfo.InvariantCulture)/255D)*99D ;
  int iBlue = (int)Math.Truncate(level) ;
  parentModule.Command("MultiInstance.Set").Set("Switch.MultiLevel/4/" + ((int)iBlue).ToString());
  
  Program.RaiseEvent(moduleRaise, "Status.ColorRgb", parameter, "Fibaro RGBW");
  
//  double average = (iRed + iGreen + iBlue) / 3;
//  Program.RaiseEvent(moduleRaise, "Status.Level", (average / 100).ToString(), "Fibaro RGBW");
  Program.RaiseEvent(moduleRaise, "Status.Level", "1", "Fibaro RGBW");
  
  return true;
};

var HSB2RGB = new Func&lt;double,double,double,dynamic&gt;((double hue, double saturation, double brightness) =&gt; {
  double red = 0, green = 0, blue = 0;
  if (saturation == 0)
  {
    red = green = blue = brightness;
  }
  else
  {
    // the color wheel consists of 6 sectors. Figure out which sector you're in.
    double sectorPos = hue / 60.0;
    int sectorNumber = (int)(Math.Floor(sectorPos));
    // get the fractional part of the sector
    double fractionalSector = sectorPos - sectorNumber;

    // calculate values for the three axes of the color. 
    double p = brightness * (1.0 - saturation);
    double q = brightness * (1.0 - (saturation * fractionalSector));
    double t = brightness * (1.0 - (saturation * (1 - fractionalSector)));

    // assign the fractional colors to r, g, and b based on the sector the angle is in.
    switch (sectorNumber)
    {
      case 0:
        red = brightness;
        green = t;
        blue = p;
        break;
      case 1:
        red = q;
        green = brightness;
        blue = p;
        break;
      case 2:
        red = p;
        green = brightness;
        blue = t;
        break;
      case 3:
        red = p;
        green = q;
        blue = brightness;
        break;
      case 4:
        red = t;
        green = p;
        blue = brightness;
       break;
      case 5:
        red = brightness;
        green = p;
        blue = q;
        break;
    }
  }
  dynamic color = new ExpandoObject();
  color.Red = (int)(red*255d);
  color.Green = (int)(green*255d);
  color.Blue = (int)(blue*255d);
  return color;
});



When.WebServiceCallReceived("HomeAutomation.FibaroRGBW", ( args ) =&gt; {
    string[] reqs = ((string)args).Split('/');
    //string domain = reqs[0];
  	try
    {
      string lightnumber = reqs[1];
      string command = reqs[2];
      string parameter = ""; if (reqs.Length &gt; 3) parameter = Uri.UnescapeDataString(reqs[3]);
      //
      var module = Modules.InDomain("HomeAutomation.ZWave").WithAddress(lightnumber).Get();
      var moduleRaise = Modules.InDomain("HomeAutomation.FibaroRGBW").WithAddress(lightnumber).Get();
      //
      switch(command)
      {
		// API : http://&lt;hg_address&gt;/api/HomeAutomation.fibarorgbw/&lt;light_number&gt;/Control.On
        case "Control.On":
			module.On();
        	Program.RaiseEvent(moduleRaise, "Status.Level", "1", "Fibaro RGBW");
        	break;
		// API : http://&lt;hg_address&gt;/api/HomeAutomation.fibarorgbw/&lt;light_number&gt;/Control.Off
        case "Control.Off":
			module.Off();
        	Program.RaiseEvent(moduleRaise, "Status.Level", "0", "Fibaro RGBW");
        	break;
		// API : http://&lt;hg_address&gt;/api/HomeAutomation.fibarorgbw/&lt;light_number&gt;/Control.Off
        case "Control.Toggle":
        	if (module.Parameter("Status.Level").DecimalValue == 0)
            {
				module.On();
              	Program.RaiseEvent(moduleRaise, "Status.Level", "1", "Fibaro RGBW");
            }
        	else
            {
	 			module.Off();
 	        	Program.RaiseEvent(moduleRaise, "Status.Level", "0", "Fibaro RGBW");
            }
        	break;
		// API : http://&lt;hg_address&gt;/api/HomeAutomation.fibarorgbw/&lt;light_number&gt;/Control.Level/&lt;level&gt; 0.00 to 1.00
        case "Control.Level":
        	module.Command("Control.Level").Set((double.Parse(parameter.Replace(",", "."), CultureInfo.InvariantCulture)).ToString()) ;
            Program.RaiseEvent(moduleRaise, "Status.Level", (double.Parse(parameter.Replace(",", "."), CultureInfo.InvariantCulture) / 100D).ToString(), "Fibaro RGBW");
        	break;
        // API : http://&lt;hg_address&gt;/api/HomeAutomation.fibarorgbw/&lt;light_number&gt;/Control.ColorHsb/&lt;hue&gt;,&lt;sat&gt;,&lt;bri&gt;
        case "Control.ColorHsb":
            Program.RaiseEvent(moduleRaise, "Status.ColorHsb", parameter, "Fibaro RGBW");
          	string[] hsbValues = parameter.Split(',');
        	double h = double.Parse(hsbValues[0].Replace(",", "."), CultureInfo.InvariantCulture) * 360;
			double s = double.Parse(hsbValues[1].Replace(",", "."), CultureInfo.InvariantCulture);
			double b = double.Parse(hsbValues[2].Replace(",", "."), CultureInfo.InvariantCulture);
                        
            var rgbColor = HSB2RGB(h,s,b);
			// then you have rgbColor.Red, rgbColor.Green and rgbColor.Blue properties.
        	bridgeapicall(lightnumber, String.Format("{0},{1},{2}", rgbColor.Red, rgbColor.Green, rgbColor.Blue));
          	break;
         // API : http://&lt;hg_address&gt;/api/HomeAutomation.fibarorgbw/&lt;light_number&gt;/Control.ColorRgb/&lt;red&gt;,&lt;green&gt;,&lt;blue&gt;
         case "Control.ColorRgb":
        	bridgeapicall(lightnumber, parameter);
        	break;
        // API : http://&lt;hg_address&gt;/api/HomeAutomation.fibarorgbw/&lt;light_number&gt;/Control.ProgramRGB/&lt;nprog&gt; 6 to 10
        case "Control.ProgramRGB" :
			module.Command("Config.ParameterSet").Set("72/" + parameter);
           	Program.RaiseEvent(moduleRaise, "Status.Level", "1", "Fibaro RGBW");
            break;
      }
      //
      return "{ 'ResponseValue' : 'OK' }";    
    } catch (Exception e) { 
      
    	Program.Notify("Fibaro RGBW ERROR!", e.Message);
                       
    }
    return "{ 'ResponseValue' : 'ERROR' }";
});

Program.GoBackground();
</ScriptSource>
  <ScriptErrors>[]</ScriptErrors>
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>502</Address>
  <Name>Fibaro RGBW</Name>
  <Description>Adds ZWave Fibaro RGBWM-441 control capability to HomeGenie. 
</Description>
  <Group>Z-Wave</Group>
  <Features />
  <ActivationTime xsi:nil="true" />
  <TriggerTime xsi:nil="true" />
  <Type>CSharp</Type>
  <IsEnabled>false</IsEnabled>
</ProgramBlock>