<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ConditionType>OnTrue</ConditionType>
  <Conditions />
  <Commands />
  <ScriptCondition>var moduleDomain = "HomeAutomation.AlarmPanel.Ademco";
Program.Setup(() =&gt;
{
  	Program.AddVirtualModules(moduleDomain, "Generic", "AlarmPanel/Ademco/Panel", 1, 1);
    Program.AddInputField("Port", "COM4", "COM Port of the AD2USB");
    Program.AddInputField("PIN", "", "Stored PIN (Required for quick access buttons like Disarm)");
    Program.Parameter("LastUpdate").Value = DateTime.Now.ToString();
});
return true;
</ScriptCondition>
  <ScriptSource>var moduleDomain = "HomeAutomation.AlarmPanel.Ademco";

Action&lt;string&gt; HandleStringReceived = (string message) =&gt;
{
  Program.Parameter("LastUpdate").Value = DateTime.Now.ToString();
  if (message.Contains("\""))
  {
    message = message.Substring(message.IndexOf("\"") + 1, message.LastIndexOf("\"") - message.IndexOf("\"") - 1).Trim();
    message = new System.Text.RegularExpressions.Regex(@"[ ]{2,}", System.Text.RegularExpressions.RegexOptions.None).Replace(message, @" ").ToString();
	Modules.InDomain("HomeAutomation.AlarmPanel.Ademco").Each((module) =&gt; {
      if(module.Parameter("AlarmPanel.Status").Value != message){
        module.Parameter("AlarmPanel.Status").Value = message;
        Program.RaiseEvent(module, "AlarmPanel.Status", module.Parameter("AlarmPanel.Status").Value, "Alarm Panel");
 
        // If "****DISARMED**** Hit * for faults" shows, no faults can be read by the program until the * key is pressed
        if(message.ToLower().Contains("hit * for faults"))
			SerialPort.SendMessage("*");
      }
      return true;
	});
  } else if(message.StartsWith("!RFX")) {
    string[] rfxMessage = message.Split(new Char[] {':',','});
    string rfxStatus = rfxMessage[1] + ":" + rfxMessage[2];
    Modules.InDomain("HomeAutomation.AlarmPanel.Ademco").Each((module) =&gt; {
      module.Parameter("AlarmPanel.RFX").Value = rfxStatus.Trim();
      Program.RaiseEvent(module, "AlarmPanel.RFX", module.Parameter("AlarmPanel.RFX").Value, "Alarm Panel");
      return true;
    });
  }
};

Action&lt;byte[]&gt; HandleMessageReceived = (byte[] message) =&gt; {};

Action&lt;bool&gt; HandleStatusChanged = (bool connected) =&gt;
{
  Modules.InDomain("HomeAutomation.AlarmPanel.Ademco").Each((module) =&gt; {
	module.Parameter("AlarmPanel.Connection").Value = (connected ? "Connected" : "Disconnected");
  	Program.RaiseEvent(module, "AlarmPanel.Connection", module.Parameter("AlarmPanel.Connection").Value, "Alarm Panel");
    return true;
  });
  Program.RaiseEvent("AlarmPanel.Connection", "Connected", "Alarm Panel");
};

When.WebServiceCallReceived(moduleDomain,(args) =&gt; 
{
  string[] request = ((string)args).Split('/');
  var response = "{ 'ResponseValue' : 'ERROR' }";
  try
  {
    string moduleId = request[1];
    string command = request[2];
    string parameter = request[3].Replace("%20", " ");
	var module = Modules.InDomain(moduleDomain).WithAddress(moduleId).Get();
    var pin = Program.InputField("PIN").Value;
    
    switch(command)
    {
      case "QuickAccess":
        switch(parameter)
        {
        	case "Disarm":
				SerialPort.SendMessage(pin + "1");
        		break;
        	case "Away":
				SerialPort.SendMessage(pin + "2");
        		break;
        	case "Stay":
				SerialPort.SendMessage(pin + "3");
        		break;
        	case "Instant":
				SerialPort.SendMessage(pin + "7");
        		break;
        	case "Max":
				SerialPort.SendMessage(pin + "4");
        		break;
        	case "Chime":
				SerialPort.SendMessage(pin + "9");
        		break;
      	}
        break;
      case "Keypad":
        switch(parameter)
        {
          case "1":
			SerialPort.SendMessage("1");
    	    break;
          case "2":
			SerialPort.SendMessage("2");
    	    break;
          case "3":
			SerialPort.SendMessage("3");
    	    break;
          case "4":
			SerialPort.SendMessage("4");
    	    break;
          case "5":
			SerialPort.SendMessage("5");
    	    break;
          case "6":
			SerialPort.SendMessage("6");
    	    break;
          case "7":
			SerialPort.SendMessage("7");
    	    break;
          case "8":
			SerialPort.SendMessage("8");
    	    break;
          case "9":
			SerialPort.SendMessage("9");
    	    break;
          case "0":
			SerialPort.SendMessage("0");
    	    break;
          case "*":
			SerialPort.SendMessage("*");
    	    break;
          case "#":
			SerialPort.SendMessage("#");
    	    break;
        }
        break;
    }

  
  
  } 
  catch (Exception ex) {
    response = ex.Message + " " + ex.StackTrace;
  }
  
  return response;
});


while (Program.IsEnabled){
  
  if(!SerialPort.IsConnected){
    SerialPort
      .WithName(Program.InputField("Port").Value)
      .OnStatusChanged(HandleStatusChanged)
      .OnMessageReceived(HandleMessageReceived)
      .OnStringReceived(HandleStringReceived)
      .Connect(115200);
  }
  
  DateTime lastUpdate = DateTime.Parse(Program.Parameter("LastUpdate").Value);
  if(DateTime.Now &gt; lastUpdate.AddMinutes(2))
    SerialPort.Disconnect();

  Pause(30);
  
}
</ScriptSource>
  <ScriptErrors />
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>1012</Address>
  <Name>Alarm Panel</Name>
  <Description>Connects to an Ademco alarm panel using the AD2USB USB/Panel adapter</Description>
  <Group>Santee Programs</Group>
  <Features />
  <ActivationTime xsi:nil="true" />
  <TriggerTime>2015-11-13T22:43:35.9492287Z</TriggerTime>
  <Type>CSharp</Type>
  <IsEnabled>true</IsEnabled>
</ProgramBlock>