<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ConditionType>OnTrue</ConditionType>
  <Conditions />
  <Commands />
  <ScriptCondition>Program.Setup(()=&gt;{

  Program.AddOption("StartTime", "", "1. Start 'Presence' program at time:", "text");
  Program.AddOption("EndTime", "", "2. Stop 'Presence' program at time:", "text");
  Program.AddOption("ProgramToRun", "", "3. Enter the Name or ID of the program to run:", "text");
  Program.AddOption("Pause", "30", "4. Pause between each run (seconds):", "text");

});

if (Program.Option("StartTime").Value != "" 
    &amp;&amp; Program.Option("EndTime").Value != ""
    &amp;&amp; Program.Option("ProgramToRun").Value != "")
{
  try
  {

    var time_now = DateTime.Now; //String.Format("{H:mm:ss}", DateTime.Now);DateTime.ParseExact("124510", "hhmmss", CultureInfo.InvariantCulture);

    var time_start = DateTime.ParseExact(Program.Option("StartTime").Value, "H:mm", System.Globalization.CultureInfo.InvariantCulture);
    var time_end = DateTime.ParseExact(Program.Option("EndTime").Value, "H:mm", System.Globalization.CultureInfo.InvariantCulture);

    var duration = new TimeSpan(time_end.Ticks - time_start.Ticks).TotalMinutes;
    var distance = new TimeSpan(time_now.Ticks - time_start.Ticks).TotalMinutes;

    if (distance &gt; 0 &amp;&amp; distance &lt; duration &amp;&amp; Program.Option("ProgramToRun").Value != "")
    {
      // execute the program
      Program.Run();
    }

  }
  catch (Exception ex) 
  { 
    Program.Notify("Presence Simulator", Program.Option("StartTime").Value + "&lt;br&gt;ERROR:" + ex.Message);
  }
}

Pause(30);
</ScriptCondition>
  <ScriptSource>var programToRun = Program.Option("ProgramToRun").Value;
var pause = Program.Option("Pause").DecimalValue;
if (pause &lt; 1) pause = 1;

Program.Notify( "Presence Simulator", "Running 'Presence' program:&lt;br&gt;" + programToRun);

// this is a blocking call and it will wait for the program to end
try
{
  Program.Run( programToRun ); 
}
catch (Exception e)
{
  Program.Notify("Presence Simulator", "ERROR running program:&lt;br&gt;" + e.Message);
}
Pause( pause ); 

</ScriptSource>
  <ScriptErrors>[]</ScriptErrors>
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>144</Address>
  <Name>Presence Simulator</Name>
  <Description>Simulate presence in the house by looping a program during a given interval time.
The program to run can  be a pre-recorded Wizard Script (http://generoso.info/homegenie/scenarios.html).</Description>
  <Group>Security</Group>
  <Features />
  <ActivationTime xsi:nil="true" />
  <TriggerTime xsi:nil="true" />
  <Type>CSharp</Type>
  <IsEnabled>false</IsEnabled>
</ProgramBlock>