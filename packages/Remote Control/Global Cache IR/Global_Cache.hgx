<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ConditionType>OnTrue</ConditionType>
  <Conditions />
  <Commands />
  <ScriptCondition>Program.Setup(()=&gt;{
  		Program.AddInputField("GlobalCacheIP_1", "192.168.?.?", "GlobalCache Module 1 IP Address"); // add GlobalCache module 1 ip address parameter to be set up in the program.
  		// The program can support more modules. Just add a similar line as above and change the module numbers.

        // Create 1 virtual module with the domain "HomeAutomation.GlobalCache" and with address from 1 to 1
        // "Program" is the type and "homegenie/generic/program" is the widget to be used to display the virtual module
        // See directory "html/pages/control/widgets/" for widget list.
        Program.AddVirtualModules("HomeAutomation.GlobalCache", "Program", "homegenie/generic/program", 1, 1); // If more than one Global Cache device is used, change the last parameter to the number of devices available.
});

return true; // Activating the program.
</ScriptCondition>
  <ScriptSource>Program.Parameter("GlobalCache.InUse").Value = "false"; // Flooding the GlobalCache device will make GlobalCache or HomeGenie stop responding. This persistent program variable will be used to avoid flooding.

Func&lt;string, string, bool&gt; GlobalCacheApiCall = (string globalCacheModuleNumber, string message) =&gt; 
{
    if (Program.InputField("GlobalCacheIP_" + globalCacheModuleNumber).Value == "" || Program.InputField("GlobalCacheIP_" + globalCacheModuleNumber).Value.EndsWith("?"))
    {
      	return false;
    }

    // The following code is to avoid flooding the GlobalCache device by using the persistent program variable GlobalCacheInUse. Stress testing after this addition, proved to be very solid.
    var counter = 0;
    
  	do 
    {
        Pause(1);
        if (counter++ == 12) return false; // to avoid a possible infinite loop.
    }
    while (Program.Parameter("GlobalCache.InUse").Value == "true");

    // At this stage. the GlobalCache device is not in use
    Program.Parameter("GlobalCache.InUse").Value = "true"; // Set the GlobalCache device as in use so that no other code instances will use it.

    var globalcacheIP = Program.InputField("GlobalCacheIP_" + globalCacheModuleNumber).Value;

    TcpClient.Service(globalcacheIP).Connect(4998); // Connects to the GlobalCache device via tcp
    if (TcpClient.IsConnected) // This helps eleminating general HomeGenie slow down whenever a Global Cache device is not connected and a TCP message is sent.
    {
        TcpClient.SendMessage(message + "\r"); // Send the infrared message to the GlobalCache. The addition of a carriage return is recommended and seems that GlobalCache responds faster when sending feedback after command execution
        Pause(1); // This pause seems to be needed for a correct functionality
        TcpClient.Disconnect();
        Program.Parameter("GlobalCache.InUse").Value = "false"; // Now that we are ready with the GlobalCache device we set it as not in use so that other code instances will be able to use it.
        return true;
    }

    return false; // Global Cache device is not connected.
};


// http://&lt;hg_address&gt;/api/HomeAutomation.GlobalCache/...
When.WebServiceCallReceived("HomeAutomation.GlobalCache", ( args ) =&gt; 
{	   
    string[] reqs = ((string)args).Split('/');

    try
    {
        //string domain = reqs[0];
        string globalCacheModuleNumber = reqs[1];
        string command = reqs[2];
        string parameter = ""; if (reqs.Length &gt; 3) parameter = Uri.UnescapeDataString(reqs[3]);

        var globalCacheModules = Modules.InDomain("HomeAutomation.GlobalCache");
        var globalCacheModule = globalCacheModules.WithAddress(globalCacheModuleNumber).Get();

        switch(command)
        {
            // eg. http://&lt;hg_address&gt;/api/HomeAutomation.GlobalCache/&lt;module_number&gt;/Control.Send/&lt;sendir command&gt;
            case "Control.Send":
                bool globalCacheReturn = GlobalCacheApiCall(globalCacheModuleNumber, parameter);
                if (globalCacheReturn)  // Check if GlobalCache device is connected.
                {
                  	Program.RaiseEvent(globalCacheModule, "Status.Level", "100", "GlobalCache");
                }
                else
                {
                    Program.RaiseEvent(globalCacheModule, "Status.Level", "-1", "GlobalCache");
                    throw new Exception("Global Cache device not connected"); // Throw custom exception. 
                }
            break;
        }

        return "{ 'ResponseValue' : 'OK' }";    
    }

    catch (Exception e) 
    { 
      	Program.Notify("GlobalCache ERROR!", e.Message);
    }

    return "{ 'ResponseValue' : 'ERROR' }";
});

Program.GoBackground();
</ScriptSource>
  <ScriptErrors>[]</ScriptErrors>
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>1001</Address>
  <Name>Global Cache</Name>
  <Description>Global Cache IP2IR and WIFI2IR virtual modules. It can control IR devices from HomeGenie by sending tcp messages to the Global Cache IR blasters devices.</Description>
  <Group>WarStreet</Group>
  <Features />
  <ActivationTime>2015-06-15T16:37:11.031837Z</ActivationTime>
  <TriggerTime>2015-06-15T16:37:11.313207Z</TriggerTime>
  <Type>CSharp</Type>
  <IsEnabled>true</IsEnabled>
</ProgramBlock>